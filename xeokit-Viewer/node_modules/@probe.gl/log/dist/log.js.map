{"version":3,"sources":["../src/log.ts"],"names":["VERSION","isBrowser","LocalStorage","formatImage","formatTime","leftPad","addColor","autobind","assert","getHiResTimestamp","originalConsole","debug","console","log","info","warn","error","DEFAULT_LOG_CONFIGURATION","enabled","level","noop","cache","ONCE","once","Log","constructor","id","_startTs","_deltaTs","_storage","userData","LOG_THROTTLE_TIMEOUT","timeStamp","Object","seal","newLevel","setLevel","getLevel","isEnabled","config","getTotal","Number","toPrecision","getDelta","priority","newPriority","getPriority","enable","setConfiguration","get","setting","set","value","settings","table","condition","message","_getLogFunction","arguments","deprecated","oldUsage","newUsage","removed","probe","logLevel","time","columns","tag","getTableHeader","image","scale","_shouldLog","logImageInBrowser","logImageInNode","timeEnd","group","opts","collapsed","options","normalizeArguments","method","groupCollapsed","assign","groupEnd","withGroup","func","trace","normalizeLogLevel","args","total","delta","decorateMessage","bind","resolvedLevel","isFinite","Array","from","length","shift","undefined","unshift","messageType","color","background","img","Image","onload","src","element","nodeName","toLowerCase","toDataURL","key","title"],"mappings":"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","sourcesContent":["// probe.gl, MIT license\n\n/* eslint-disable no-console */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport {LocalStorage} from './utils/local-storage';\nimport {formatImage, formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n/** \"Global\" log configuration settings */\ntype LogConfiguration = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: unknown;\n};\n\n/** Options when logging a message */\ntype LogOptions = {\n  method?: Function;\n  time?: boolean;\n  total?: number;\n  delta?: number;\n  tag?: string;\n  message?: string;\n  once?: boolean;\n  nothrottle?: boolean;\n  args?: any;\n};\n\ntype LogFunction = () => void;\n\ntype Table = Record<string, any>;\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser() ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\nconst DEFAULT_LOG_CONFIGURATION: Required<LogConfiguration> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\n/** A console wrapper */\n\nexport class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage<LogConfiguration>;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage<LogConfiguration>(\n      `__probe-${this.id}__`,\n      DEFAULT_LOG_CONFIGURATION\n    );\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return milliseconds, with fractions */\n  getTotal(): number {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return milliseconds, with fractions */\n  getDelta(): number {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority: number) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority(): number {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority(): number {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.setConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.setConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.setConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): asserts condition {\n    assert(condition, message);\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args: unknown[]): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args: unknown[]): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args: unknown[]): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args: unknown[]): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args: unknown[]): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args: unknown[]): LogFunction;\n  once(logLevel, message?) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      return this._getLogFunction(\n        logLevel,\n        table,\n        console.table || noop,\n        (columns && [columns]) as unknown as IArguments,\n        {\n          tag: getTableHeader(table)\n        }\n      );\n    }\n    return noop;\n  }\n\n  /** logs an image under Chrome */\n  image({\n    logLevel,\n    priority,\n    image,\n    message = '',\n    scale = 1\n  }: {\n    logLevel?: number;\n    priority?: number;\n    image: any;\n    message?: string;\n    scale?: number;\n  }): LogFunction {\n    if (!this._shouldLog(logLevel || priority)) {\n      return noop;\n    }\n    return isBrowser()\n      ? logImageInBrowser({image, message, scale})\n      : logImageInNode({image, message, scale});\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: LogOptions\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once && tag) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments | undefined;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\n/** @deprecated Function removed */\nfunction logImageInNode({image, message = '', scale = 1}) {\n  console.warn('removed');\n  return noop;\n}\n\nfunction logImageInBrowser({image, message = '', scale = 1}) {\n  if (typeof image === 'string') {\n    const img = new Image();\n    img.onload = () => {\n      const args = formatImage(img, message, scale);\n      console.log(...args);\n    };\n    img.src = image;\n    return noop;\n  }\n  const element = image.nodeName || '';\n  if (element.toLowerCase() === 'img') {\n    console.log(...formatImage(image, message, scale));\n    return noop;\n  }\n  if (element.toLowerCase() === 'canvas') {\n    const img = new Image();\n    img.onload = () => console.log(...formatImage(img, message, scale));\n    img.src = image.toDataURL();\n    return noop;\n  }\n  return noop;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n"],"file":"log.js"}