{"version":3,"file":"parse-gltf.js","names":["_textures","require","_images","_loaderUtils","_assert","_resolveUrl","_getTypedArray","_gltfExtensions","_normalizeGltfV","_postProcessGltf","_parseGlb","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_arrayLikeToArray","toString","slice","constructor","name","from","test","arr","len","arr2","isGLTF","arrayBuffer","options","byteOffset","isGLB","parseGLTF","_x","_x2","_parseGLTF","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","gltf","arrayBufferOrString","_options$gltf","_options$gltf2","_options$gltf3","_options$gltf4","context","promises","_promise","promise","_args","wrap","_callee$","_context","prev","undefined","parseGLTFContainerSync","normalizeGLTFV1","normalize","preprocessExtensions","loadBuffers","json","buffers","loadImages","push","decodeExtensions","Promise","all","abrupt","postProcess","postProcessGLTF","stop","data","uri","baseUri","ArrayBuffer","textDecoder","TextDecoder","decode","parseJSON","glb","parseGLBSync","assert","type","concat","_glb","fill","header","hasBinChunk","binChunks","byteLength","images","_x3","_x4","_x5","_loadBuffers","_callee2","buffer","_context$fetch","_response$arrayBuffer","fetch","response","_callee2$","_context2","resolveUrl","sent","_x6","_x7","_x8","_loadImages","_callee3","imageIndices","_iterator2","_step2","imageIndex","_callee3$","_context3","getReferencesImageIndices","loadImage","Set","textures","_iterator","_step","texture","source","add","sort","_x9","_x10","_x11","_x12","_x13","_loadImage","_callee4","image","index","parse","array","parsedImage","_callee4$","_context4","bufferView","Number","isFinite","getTypedArrayForBufferView","sliceArrayBuffer","ImageLoader","BasisLoader","mimeType","basis","format","selectSupportedBasisFormat","compressed","mipmaps","width","height"],"sources":["../../../../src/lib/parsers/parse-gltf.ts"],"sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {BasisLoader, selectSupportedBasisFormat} from '@loaders.gl/textures';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport type {GLB} from '../types/glb-types';\nimport type {GLTFWithBuffers} from '../types/gltf-types';\n\nimport {ImageLoader} from '@loaders.gl/images';\nimport {parseJSON, sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {resolveUrl} from '../gltf-utils/resolve-url';\nimport {getTypedArrayForBufferView} from '../gltf-utils/get-typed-array';\nimport {preprocessExtensions, decodeExtensions} from '../api/gltf-extensions';\nimport {normalizeGLTFV1} from '../api/normalize-gltf-v1';\nimport {postProcessGLTF} from '../api/post-process-gltf';\nimport parseGLBSync, {isGLB} from './parse-glb';\n\nexport type GLTFParseOptions = {\n  normalize?: boolean;\n  loadImages?: boolean;\n  loadBuffers?: boolean;\n  decompressMeshes?: boolean;\n  postProcess?: boolean;\n  excludeExtensions?: string[];\n};\n\n// export type GLTFOptions = {\n//   gltf?: GLTFParseOptions;\n// };\n\nexport function isGLTF(arrayBuffer, options?): boolean {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\n\nexport async function parseGLTF(\n  gltf: GLTFWithBuffers,\n  arrayBufferOrString,\n  byteOffset = 0,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n) {\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  normalizeGLTFV1(gltf, {normalize: options?.gltf?.normalize});\n\n  preprocessExtensions(gltf, options, context);\n\n  const promises: Promise<any>[] = [];\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options?.gltf?.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  if (options?.gltf?.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  // Post processing resolves indices to objects, buffers\n  return options?.gltf?.postProcess ? postProcessGLTF(gltf, options) : gltf;\n}\n\n// `data` - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    const glb: GLB = {} as GLB;\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n\n    assert(glb.type === 'glTF', `Invalid GLB magic string ${glb.type}`);\n\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {binChunks} = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n    // TODO - this modifies JSON and is a post processing thing\n    // gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    // gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n/** Asynchronously fetch and parse buffers, store in buffers array outside of json\n * TODO - traverse gltf and determine which buffers are actually needed\n */\nasync function loadBuffers(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  // TODO\n  const buffers = gltf.json.buffers || [];\n  for (let i = 0; i < buffers.length; ++i) {\n    const buffer = buffers[i];\n    if (buffer.uri) {\n      const {fetch} = context;\n      assert(fetch);\n\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await context?.fetch?.(uri);\n      const arrayBuffer = await response?.arrayBuffer?.();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    } else if (gltf.buffers[i] === null) {\n      gltf.buffers[i] = {\n        arrayBuffer: new ArrayBuffer(buffer.byteLength),\n        byteOffset: 0,\n        byteLength: buffer.byteLength\n      };\n    }\n  }\n}\n\n/**\n * Loads all images\n * TODO - traverse gltf and determine which images are actually needed\n * @param gltf\n * @param options\n * @param context\n * @returns\n */\nasync function loadImages(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  const imageIndices = getReferencesImageIndices(gltf);\n\n  const images = gltf.json.images || [];\n\n  const promises: Promise<any>[] = [];\n  for (const imageIndex of imageIndices) {\n    promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\n/** Make sure we only load images that are actually referenced by textures */\nfunction getReferencesImageIndices(gltf: GLTFWithBuffers): number[] {\n  const imageIndices = new Set<number>();\n\n  const textures = gltf.json.textures || [];\n  for (const texture of textures) {\n    if (texture.source !== undefined) {\n      imageIndices.add(texture.source);\n    }\n  }\n\n  return Array.from(imageIndices).sort();\n}\n\n/** Asynchronously fetches and parses one image, store in images array outside of json */\nasync function loadImage(\n  gltf: GLTFWithBuffers,\n  image,\n  index: number,\n  options,\n  context: LoaderContext\n) {\n  const {fetch, parse} = context;\n\n  let arrayBuffer;\n\n  if (image.uri && !image.hasOwnProperty('bufferView')) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n    image.bufferView = {\n      data: arrayBuffer\n    };\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n\n  // Call `parse`\n  let parsedImage = await parse(\n    arrayBuffer,\n    [ImageLoader, BasisLoader],\n    {mimeType: image.mimeType, basis: options.basis || {format: selectSupportedBasisFormat()}},\n    context\n  );\n\n  if (parsedImage && parsedImage[0]) {\n    parsedImage = {\n      compressed: true,\n      mipmaps: false,\n      width: parsedImage[0].width,\n      height: parsedImage[0].height,\n      data: parsedImage[0]\n    };\n  }\n  // TODO making sure ImageLoader is overridable by using array of loaders\n  // const parsedImage = await parse(arrayBuffer, [ImageLoader]);\n\n  // Store the loaded image\n  gltf.images = gltf.images || [];\n  gltf.images[index] = parsedImage;\n}\n"],"mappings":"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"}