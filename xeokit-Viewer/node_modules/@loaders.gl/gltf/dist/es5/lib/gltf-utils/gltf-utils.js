"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAccessorArrayTypeAndLength = getAccessorArrayTypeAndLength;
exports.getAccessorTypeFromSize = getAccessorTypeFromSize;
exports.getComponentTypeFromArray = getComponentTypeFromArray;
exports.getMemoryUsageGLTF = getMemoryUsageGLTF;
var _assert = require("../utils/assert");
var TYPES = ['SCALAR', 'VEC2', 'VEC3', 'VEC4'];
var ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT = [[Int8Array, 5120], [Uint8Array, 5121], [Int16Array, 5122], [Uint16Array, 5123], [Uint32Array, 5125], [Float32Array, 5126], [Float64Array, 5130]];
var ARRAY_TO_COMPONENT_TYPE = new Map(ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT);
var ATTRIBUTE_TYPE_TO_COMPONENTS = {
  SCALAR: 1,
  VEC2: 2,
  VEC3: 3,
  VEC4: 4,
  MAT2: 4,
  MAT3: 9,
  MAT4: 16
};
var ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {
  5120: 1,
  5121: 1,
  5122: 2,
  5123: 2,
  5125: 4,
  5126: 4
};
var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {
  5120: Int8Array,
  5121: Uint8Array,
  5122: Int16Array,
  5123: Uint16Array,
  5125: Uint32Array,
  5126: Float32Array
};
function getAccessorTypeFromSize(size) {
  var type = TYPES[size - 1];
  return type || TYPES[0];
}
function getComponentTypeFromArray(typedArray) {
  var componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);
  if (!componentType) {
    throw new Error('Illegal typed array');
  }
  return componentType;
}
function getAccessorArrayTypeAndLength(accessor, bufferView) {
  var ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];
  var components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];
  var bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];
  var length = accessor.count * components;
  var byteLength = accessor.count * components * bytesPerComponent;
  (0, _assert.assert)(byteLength >= 0 && byteLength <= bufferView.byteLength);
  return {
    ArrayType: ArrayType,
    length: length,
    byteLength: byteLength
  };
}
function getMemoryUsageGLTF(gltf) {
  var images = gltf.images,
    bufferViews = gltf.bufferViews;
  images = images || [];
  bufferViews = bufferViews || [];
  var imageBufferViews = images.map(function (i) {
    return i.bufferView;
  });
  bufferViews = bufferViews.filter(function (view) {
    return !imageBufferViews.includes(view);
  });
  var bufferMemory = bufferViews.reduce(function (acc, view) {
    return acc + view.byteLength;
  }, 0);
  var pixelCount = images.reduce(function (acc, image) {
    var _image = image.image,
      width = _image.width,
      height = _image.height;
    return acc + width * height;
  }, 0);
  return bufferMemory + Math.ceil(4 * pixelCount * 1.33);
}
//# sourceMappingURL=gltf-utils.js.map