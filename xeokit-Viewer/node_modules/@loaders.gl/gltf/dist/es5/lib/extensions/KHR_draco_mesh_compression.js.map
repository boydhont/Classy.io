{"version":3,"file":"KHR_draco_mesh_compression.js","names":["_draco","require","_loaderUtils","_gltfScenegraph","_interopRequireDefault","_gltfAttributeUtils","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_marked","_regeneratorRuntime2","mark","makeMeshPrimitiveIterator","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","KHR_DRACO_MESH_COMPRESSION","exports","preprocess","gltfData","options","context","scenegraph","Scenegraph","_iterator","_step","primitive","getObjectExtension","decode","_x","_x2","_x3","_decode","_asyncToGenerator2","_regenerator","_callee","_options$gltf","promises","_iterator5","_step5","wrap","_callee$","_context2","prev","gltf","decompressMeshes","abrupt","decompressPrimitive","Promise","all","removeExtension","stop","encode","undefined","_iterator2","json","meshes","_step2","mesh","compressMesh","addRequiredExtension","_x4","_x5","_x6","_x7","_decompressPrimitive","_callee2","dracoExtension","buffer","bufferCopy","parse","dracoOptions","decodedData","decodedAttributes","_i","_Object$entries","_Object$entries$_i","attributeName","decodedAttribute","accessorIndex","accessor","_callee2$","_context3","getTypedArrayForBufferView","bufferView","sliceArrayBuffer","byteOffset","DracoLoader","sent","getGLTFAccessors","attributes","entries","_slicedToArray2","getAccessor","min","max","indices","getGLTFAccessor","checkPrimitive","_context$parseSync","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","_iterator3","_step3","_iterator4","_step4","makeMeshPrimitiveIterator$","_context","t0","finish","t1"],"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.ts"],"sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n/* eslint-disable camelcase */\n\n/* eslint-disable camelcase */\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFMeshPrimitive,\n  GLTF_KHR_draco_mesh_compression\n} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMesh} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\n/** Extension name */\nexport const name = KHR_DRACO_MESH_COMPRESSION;\n\nexport function preprocess(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): void {\n  const scenegraph = new Scenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      // TODO - Remove fallback accessors to make sure we don't load unnecessary buffers\n    }\n  }\n}\n\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extension\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension<GLTF_KHR_draco_mesh_compression>(\n    primitive,\n    KHR_DRACO_MESH_COMPRESSION\n  );\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(bufferCopy, DracoLoader, dracoOptions, context)) as DracoMesh;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"mappings":"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"}