{"version":3,"file":"KHR_techniques_webgl.js","names":["_gltfScenegraph","_interopRequireDefault","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","KHR_TECHNIQUES_WEBGL","exports","decode","_x","_decode","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","gltfData","gltfScenegraph","json","extension","techniques","_iterator","_step","material","materialExtension","wrap","_callee$","_context","prev","GLTFScenegraph","getExtension","resolveTechniques","materials","getObjectExtension","technique","assign","values","resolveValues","removeObjectExtension","removeExtension","stop","encode","_x2","_x3","_encode","_callee2","options","_callee2$","_context2","techniquesExtension","_techniquesExtension$","programs","_techniquesExtension$2","shaders","_techniquesExtension$3","textDecoder","TextDecoder","forEach","shader","Number","isFinite","bufferView","code","getTypedArrayForBufferView","Error","program","fragmentShader","vertexShader","keys","uniforms","uniform","_typeof2","index","undefined","texture","getTexture"],"sources":["../../../../../src/lib/extensions/deprecated/KHR_techniques_webgl.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_techniques_webgl\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_techniques_webgl\n\nimport type {GLTF} from '../../types/gltf-types';\n\nimport GLTFScenegraph from '../../api/gltf-scenegraph';\n\nconst KHR_TECHNIQUES_WEBGL = 'KHR_techniques_webgl';\n\nexport const name = KHR_TECHNIQUES_WEBGL;\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  const extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);\n  if (extension) {\n    const techniques = resolveTechniques(extension, gltfScenegraph);\n\n    for (const material of json.materials || []) {\n      const materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n      if (materialExtension) {\n        // @ts-ignore TODO\n        material.technique = Object.assign(\n          {},\n          materialExtension,\n          // @ts-ignore\n          techniques[materialExtension.technique]\n        );\n        // @ts-ignore TODO\n        material.technique.values = resolveValues(material.technique, gltfScenegraph);\n      }\n      gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);\n    }\n\n    // Remove the top-level extension\n    gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);\n  }\n}\n// eslint-disable-next-line\nexport async function encode(gltfData, options): Promise<void> {\n  // TODO\n}\n\nfunction resolveTechniques(\n  techniquesExtension: {[key: string]: any},\n  // programs: {[key: string]: any}[],\n  // shaders: {[key: string]: any}[],\n  // techniques: {[key: string]: any}[]\n  gltfScenegraph\n) {\n  const {programs = [], shaders = [], techniques = []} = techniquesExtension;\n  const textDecoder = new TextDecoder();\n\n  shaders.forEach((shader) => {\n    if (Number.isFinite(shader.bufferView)) {\n      shader.code = textDecoder.decode(\n        gltfScenegraph.getTypedArrayForBufferView(shader.bufferView)\n      );\n    } else {\n      // TODO: handle URI shader\n      throw new Error('KHR_techniques_webgl: no shader code');\n    }\n  });\n\n  programs.forEach((program) => {\n    program.fragmentShader = shaders[program.fragmentShader];\n    program.vertexShader = shaders[program.vertexShader];\n  });\n\n  techniques.forEach((technique) => {\n    technique.program = programs[technique.program];\n  });\n\n  return techniques;\n}\n\nfunction resolveValues(technique, gltfScenegraph) {\n  const values = Object.assign({}, technique.values);\n\n  // merge values from uniforms\n  Object.keys(technique.uniforms || {}).forEach((uniform) => {\n    if (technique.uniforms[uniform].value && !(uniform in values)) {\n      values[uniform] = technique.uniforms[uniform].value;\n    }\n  });\n\n  // resolve textures\n  Object.keys(values).forEach((uniform) => {\n    if (typeof values[uniform] === 'object' && values[uniform].index !== undefined) {\n      // Assume this is a texture\n      // TODO: find if there are any other types that can be referenced\n      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);\n    }\n  });\n\n  return values;\n}\n"],"mappings":"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"}