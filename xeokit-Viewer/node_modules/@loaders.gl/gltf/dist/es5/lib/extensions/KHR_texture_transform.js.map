{"version":3,"file":"KHR_texture_transform.js","names":["_core","require","_gltfUtils","_gltfConstants","_gltfScenegraph","_interopRequireDefault","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","EXT_MESHOPT_TRANSFORM","exports","scratchVector","Vector3","scratchRotationMatrix","Matrix3","scratchScaleMatrix","decode","_x","_x2","_decode","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","gltfData","options","gltfScenegraph","extension","materials","wrap","_callee$","_context","prev","GLTFScenegraph","getExtension","abrupt","json","transformTexCoords","stop","materialIndex","_gltfData$json$materi","_material$pbrMetallic","_material$pbrMetallic2","processedTexCoords","material","baseColorTexture","pbrMetallicRoughness","transformPrimitives","emisiveTexture","emissiveTexture","normalTexture","occlusionTexture","metallicRoughnessTexture","texture","transformParameters","getTransformParameters","meshes","_iterator","_step","mesh","_iterator2","primitives","_step2","primitive","Number","isFinite","transformPrimitive","_texture$extensions","textureInfo","extensions","_texture$texCoord","texCoord","originalTexCoord","_textureInfo$texCoord","isProcessed","findIndex","_ref","_ref2","_slicedToArray2","original","newTexCoord","matrix","makeTransformationMatrix","push","texCoordAccessor","attributes","concat","_gltfData$json$access","accessor","accessors","bufferView","_gltfData$json$buffer","bufferViews","_gltfData$buffers$buf","buffers","buffer","arrayBuffer","bufferByteOffset","byteOffset","_getAccessorArrayType","getAccessorArrayTypeAndLength","ArrayType","bytes","BYTES","componentType","components","COMPONENTS","type","elementAddressScale","byteStride","result","Float32Array","count","uv","set","transformByMatrix3","updateGltf","createAttribute","newTexCoordArray","byteLength","originalAccessor","extensionData","_extensionData$offset","offset","_extensionData$rotati","rotation","_extensionData$scale","scale","translationMatirx","rotationMatirx","Math","cos","sin","scaleMatrix","multiplyRight"],"sources":["../../../../src/lib/extensions/KHR_texture_transform.ts"],"sourcesContent":["/**\n * https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md\n */\n\nimport {Vector3, Matrix3} from '@math.gl/core';\nimport type {GLTFMeshPrimitive, GLTFWithBuffers} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\nimport {BYTES, COMPONENTS} from '../gltf-utils/gltf-constants';\nimport {\n  Accessor,\n  BufferView,\n  MaterialNormalTextureInfo,\n  MaterialOcclusionTextureInfo,\n  TextureInfo as GLTFTextureInfo\n} from '../types/gltf-json-schema';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\n/** Extension name */\nconst EXT_MESHOPT_TRANSFORM = 'KHR_texture_transform';\n\nexport const name = EXT_MESHOPT_TRANSFORM;\n\nconst scratchVector = new Vector3();\nconst scratchRotationMatrix = new Matrix3();\nconst scratchScaleMatrix = new Matrix3();\n\n/** Extension textureInfo https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_transform#gltf-schema-updates */\ntype TextureInfo = {\n  /** The offset of the UV coordinate origin as a factor of the texture dimensions. */\n  offset?: [number, number];\n  /** Rotate the UVs by this many radians counter-clockwise around the origin. This is equivalent to a similar rotation of the image clockwise. */\n  rotation?: number;\n  /** The scale factor applied to the components of the UV coordinates. */\n  scale?: [number, number];\n  /** Overrides the textureInfo texCoord value if supplied, and if this extension is supported. */\n  texCoord?: number;\n};\n/** Intersection of all GLTF textures */\ntype CompoundGLTFTextureInfo = GLTFTextureInfo &\n  MaterialNormalTextureInfo &\n  MaterialOcclusionTextureInfo;\n/** Parameters for TEXCOORD transformation */\ntype TransformParameters = {\n  /** Original texCoord value https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#_textureinfo_texcoord */\n  originalTexCoord: number;\n  /** New texCoord value from extension https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_transform#gltf-schema-updates */\n  texCoord: number;\n  /** Transformation matrix */\n  matrix: Matrix3;\n};\n\n/**\n * The extension entry to process the transformation\n * @param gltfData gltf buffers and json\n * @param options GLTFLoader options\n */\nexport async function decode(gltfData: GLTFWithBuffers, options: GLTFLoaderOptions) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const extension = gltfScenegraph.getExtension(EXT_MESHOPT_TRANSFORM);\n  if (!extension) {\n    return;\n  }\n  const materials = gltfData.json.materials || [];\n  for (let i = 0; i < materials.length; i++) {\n    transformTexCoords(i, gltfData);\n  }\n}\n\n/**\n * Transform TEXCOORD by material\n * @param materialIndex processing material index\n * @param gltfData gltf buffers and json\n */\nfunction transformTexCoords(materialIndex: number, gltfData: GLTFWithBuffers): void {\n  // Save processed texCoords in order no to process the same twice\n  const processedTexCoords: [number, number][] = [];\n  const material = gltfData.json.materials?.[materialIndex];\n  const baseColorTexture = material?.pbrMetallicRoughness?.baseColorTexture;\n  if (baseColorTexture) {\n    transformPrimitives(gltfData, materialIndex, baseColorTexture, processedTexCoords);\n  }\n  const emisiveTexture = material?.emissiveTexture;\n  if (emisiveTexture) {\n    transformPrimitives(gltfData, materialIndex, emisiveTexture, processedTexCoords);\n  }\n  const normalTexture = material?.normalTexture;\n  if (normalTexture) {\n    transformPrimitives(gltfData, materialIndex, normalTexture, processedTexCoords);\n  }\n  const occlusionTexture = material?.occlusionTexture;\n  if (occlusionTexture) {\n    transformPrimitives(gltfData, materialIndex, occlusionTexture, processedTexCoords);\n  }\n  const metallicRoughnessTexture = material?.pbrMetallicRoughness?.metallicRoughnessTexture;\n  if (metallicRoughnessTexture) {\n    transformPrimitives(gltfData, materialIndex, metallicRoughnessTexture, processedTexCoords);\n  }\n}\n\n/**\n * Transform primitives of the particular material\n * @param gltfData gltf data\n * @param materialIndex primitives with this material will be transformed\n * @param texture texture object\n * @param processedTexCoords storage to save already processed texCoords\n */\nfunction transformPrimitives(\n  gltfData: GLTFWithBuffers,\n  materialIndex: number,\n  texture: CompoundGLTFTextureInfo,\n  processedTexCoords: [number, number][]\n) {\n  const transformParameters = getTransformParameters(texture, processedTexCoords);\n  if (!transformParameters) {\n    return;\n  }\n  const meshes = gltfData.json.meshes || [];\n  for (const mesh of meshes) {\n    for (const primitive of mesh.primitives) {\n      const material = primitive.material;\n      if (Number.isFinite(material) && materialIndex === material) {\n        transformPrimitive(gltfData, primitive, transformParameters);\n      }\n    }\n  }\n}\n\n/**\n * Get parameters for TEXCOORD transformation\n * @param texture texture object\n * @param processedTexCoords storage to save already processed texCoords\n * @returns texCoord couple and transformation matrix\n */\nfunction getTransformParameters(\n  texture: CompoundGLTFTextureInfo,\n  processedTexCoords: [number, number][]\n): TransformParameters | null {\n  const textureInfo = texture.extensions?.[EXT_MESHOPT_TRANSFORM];\n  const {texCoord: originalTexCoord = 0} = texture;\n  // If texCoord is not set in the extension, original attribute data will be replaced\n  const {texCoord = originalTexCoord} = textureInfo;\n  // Make sure that couple [originalTexCoord, extensionTexCoord] is not processed twice\n  const isProcessed =\n    processedTexCoords.findIndex(\n      ([original, newTexCoord]) => original === originalTexCoord && newTexCoord === texCoord\n    ) !== -1;\n  if (!isProcessed) {\n    const matrix = makeTransformationMatrix(textureInfo);\n    if (originalTexCoord !== texCoord) {\n      texture.texCoord = texCoord;\n    }\n    processedTexCoords.push([originalTexCoord, texCoord]);\n    return {originalTexCoord, texCoord, matrix};\n  }\n  return null;\n}\n\n/**\n * Transform `TEXCOORD_0` attribute in the primitive\n * @param gltfData gltf data\n * @param primitive primitive object\n * @param transformParameters texCoord couple and transformation matrix\n */\nfunction transformPrimitive(\n  gltfData: GLTFWithBuffers,\n  primitive: GLTFMeshPrimitive,\n  transformParameters: TransformParameters\n) {\n  const {originalTexCoord, texCoord, matrix} = transformParameters;\n  const texCoordAccessor = primitive.attributes[`TEXCOORD_${originalTexCoord}`];\n  if (Number.isFinite(texCoordAccessor)) {\n    // Get accessor of the `TEXCOORD_0` attribute\n    const accessor = gltfData.json.accessors?.[texCoordAccessor];\n    if (accessor && accessor.bufferView) {\n      // Get `bufferView` of the `accessor`\n      const bufferView = gltfData.json.bufferViews?.[accessor.bufferView];\n      if (bufferView) {\n        // Get `arrayBuffer` the `bufferView` look at\n        const {arrayBuffer, byteOffset: bufferByteOffset} = gltfData.buffers[bufferView.buffer];\n        // Resulting byteOffset is sum of the buffer, accessor and bufferView byte offsets\n        const byteOffset =\n          (bufferByteOffset || 0) + (accessor.byteOffset || 0) + (bufferView.byteOffset || 0);\n        // Deduce TypedArray type and its length from `accessor` and `bufferView` data\n        const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n        // Number of bytes each component occupies\n        const bytes = BYTES[accessor.componentType];\n        // Number of components. For the `TEXCOORD_0` with `VEC2` type, it must return 2\n        const components = COMPONENTS[accessor.type];\n        // Multiplier to calculate the address of the `TEXCOORD_0` element in the arrayBuffer\n        const elementAddressScale = bufferView.byteStride || bytes * components;\n        // Data transform to Float32Array\n        const result = new Float32Array(length);\n        for (let i = 0; i < accessor.count; i++) {\n          // Take [u, v] couple from the arrayBuffer\n          const uv = new ArrayType(arrayBuffer, byteOffset + i * elementAddressScale, 2);\n          // Set and transform Vector3 per https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_transform#overview\n          scratchVector.set(uv[0], uv[1], 1);\n          scratchVector.transformByMatrix3(matrix);\n          // Save result in Float32Array\n          result.set([scratchVector[0], scratchVector[1]], i * components);\n        }\n        // If texCoord the same, replace gltf structural data\n        if (originalTexCoord === texCoord) {\n          updateGltf(accessor, bufferView, gltfData.buffers, result);\n        } else {\n          // If texCoord change, create new attribute\n          createAttribute(texCoord, accessor, primitive, gltfData, result);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update GLTF structural objects with new data as we create new `Float32Array` for `TEXCOORD_0`.\n * @param accessor accessor to change\n * @param bufferView bufferView to change\n * @param buffers binary buffers\n * @param newTexcoordArray typed array with data after transformation\n */\nfunction updateGltf(\n  accessor: Accessor,\n  bufferView: BufferView,\n  buffers: {arrayBuffer: ArrayBuffer; byteOffset: number; byteLength: number}[],\n  newTexCoordArray: Float32Array\n): void {\n  accessor.componentType = 5126;\n  buffers.push({\n    arrayBuffer: newTexCoordArray.buffer,\n    byteOffset: 0,\n    byteLength: newTexCoordArray.buffer.byteLength\n  });\n  bufferView.buffer = buffers.length - 1;\n  bufferView.byteLength = newTexCoordArray.buffer.byteLength;\n  bufferView.byteOffset = 0;\n  delete bufferView.byteStride;\n}\n\n/**\n *\n * @param newTexCoord new `texCoord` value\n * @param originalAccessor original accessor object, that store data before transformation\n * @param primitive primitive object\n * @param gltfData gltf data\n * @param newTexCoordArray typed array with data after transformation\n * @returns\n */\nfunction createAttribute(\n  newTexCoord: number,\n  originalAccessor: Accessor,\n  primitive: GLTFMeshPrimitive,\n  gltfData: GLTFWithBuffers,\n  newTexCoordArray: Float32Array\n) {\n  gltfData.buffers.push({\n    arrayBuffer: newTexCoordArray.buffer,\n    byteOffset: 0,\n    byteLength: newTexCoordArray.buffer.byteLength\n  });\n  const bufferViews = gltfData.json.bufferViews;\n  if (!bufferViews) {\n    return;\n  }\n  bufferViews.push({\n    buffer: gltfData.buffers.length - 1,\n    byteLength: newTexCoordArray.buffer.byteLength,\n    byteOffset: 0\n  });\n  const accessors = gltfData.json.accessors;\n  if (!accessors) {\n    return;\n  }\n  accessors.push({\n    bufferView: bufferViews?.length - 1,\n    byteOffset: 0,\n    componentType: 5126,\n    count: originalAccessor.count,\n    type: 'VEC2'\n  });\n  primitive.attributes[`TEXCOORD_${newTexCoord}`] = accessors.length - 1;\n}\n\n/**\n * Construct transformation matrix from the extension data (transition, rotation, scale)\n * @param extensionData extension data\n * @returns transformation matrix\n */\nfunction makeTransformationMatrix(extensionData: TextureInfo): Matrix3 {\n  const {offset = [0, 0], rotation = 0, scale = [1, 1]} = extensionData;\n  const translationMatirx = new Matrix3().set(1, 0, 0, 0, 1, 0, offset[0], offset[1], 1);\n  const rotationMatirx = scratchRotationMatrix.set(\n    Math.cos(rotation),\n    Math.sin(rotation),\n    0,\n    -Math.sin(rotation),\n    Math.cos(rotation),\n    0,\n    0,\n    0,\n    1\n  );\n  const scaleMatrix = scratchScaleMatrix.set(scale[0], 0, 0, 0, scale[1], 0, 0, 0, 1);\n  return translationMatirx.multiplyRight(rotationMatirx).multiplyRight(scaleMatrix);\n}\n"],"mappings":"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"}