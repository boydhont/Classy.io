{"version":3,"file":"post-process-gltf.js","names":["_assert","require","_gltfUtils","_DEFAULT_SAMPLER","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","_classCallCheck2","_createClass2","value","postProcess","gltf","options","undefined","json","_gltf$buffers","buffers","_gltf$images","images","_gltf$baseUri","baseUri","assert","_resolveTree","_this","bufferViews","map","bufView","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","_typeof2","console","warn","concat","_this2","id","_this3","children","child","reduce","accum","meshIndex","primitives","camera","inverseBindMatrices","_this4","primitive","attributes","attribute","indices","normalTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","components","bytesPerElement","buffer","_getAccessorArrayType","getAccessorArrayTypeAndLength","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","result","Uint8Array","elementOffset","set","parameters","glEnum","_enumSamplerParameter","preloadedImage","bufferIndex","data","_resolveCamera","perspective","orthographic","postProcessGLTF"],"sources":["../../../../src/lib/api/post-process-gltf.ts"],"sourcesContent":["import {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\nimport {BufferView} from '../types/gltf-json-schema';\nimport {BufferView as BufferViewPostprocessed} from '../types/gltf-postprocessed-schema';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  json: Record<string, any> = {};\n  buffers: [] = [];\n  images: [] = [];\n\n  postProcess(gltf, options = {}) {\n    const {json, buffers = [], images = [], baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    // scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map((node) => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    // node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    // skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    // mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map((primitive) => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    // material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    // accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count) {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(texture, index) {\n    // texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    // sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    // image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView: BufferView, index: number): BufferViewPostprocessed {\n    // bufferView = {...bufferView};\n    const bufferIndex = bufferView.buffer;\n    const result: BufferViewPostprocessed = {\n      id: `bufferView-${index}`,\n      ...bufferView,\n      buffer: this.buffers[bufferIndex]\n    };\n\n    // @ts-expect-error\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // @ts-expect-error\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    result.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return result;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(gltf, options?) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"mappings":"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"}