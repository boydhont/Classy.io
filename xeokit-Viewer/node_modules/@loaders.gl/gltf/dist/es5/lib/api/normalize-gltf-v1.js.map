{"version":3,"file":"normalize-gltf-v1.js","names":["KHR_binary_glTF","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_arrayLikeToArray","toString","slice","constructor","name","from","test","arr","len","arr2","GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","GLTFV1Normalizer","_classCallCheck2","_defineProperty2","_createClass2","normalize","gltf","options","json","asset","version","undefined","console","warn","concat","Error","_addAsset","_convertTopLevelObjectsToArrays","preprocess","_convertObjectIdsToArrayIndices","_updateObjects","_updateMaterial","generator","arrayName","_convertTopLevelObjectToArray","mapName","objectMap","id","object","index","push","idToIndexMap","_convertIdsToIndices","_convertIdToIndex","_iterator","_step","_convertTextureIds","_iterator2","_step2","_convertMeshIds","_iterator3","_step3","_convertNodeIds","_iterator4","_step4","_convertSceneIds","source","_iterator5","primitives","_step5","primitive","attributes","indices","attributeName","_this","children","map","child","_this2","topLevelArrayName","_iterator6","_step6","Number","isFinite","_iterator7","_step7","type","_iterator8","_step8","_loop","_material$values","_material$values2","_material$values3","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","textureId","values","tex","texture2d_0","diffuseTex","textureIndex","findIndex","baseColorTexture","normalizeGLTFV1","arguments"],"sources":["../../../../src/lib/api/normalize-gltf-v1.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  idToIndexMap = {\n    animations: {},\n    accessors: {},\n    buffers: {},\n    bufferViews: {},\n    images: {},\n    materials: {},\n    meshes: {},\n    nodes: {},\n    samplers: {},\n    scenes: {},\n    skins: {},\n    textures: {}\n  };\n\n  json;\n\n  // constructor() {}\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param gltf - object with json and binChunks\n   * @param options\n   * @param options normalize Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    // TODO can this be handled by standard extension processing instead of called explicitly?\n    KHR_binary_glTF.preprocess(gltf);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map((child) => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`); // eslint-disable-line no-console, no-undef\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n\n  /**\n   * Update material (set pbrMetallicRoughness)\n   * @param {*} json\n   */\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n\n      const textureId =\n        material.values?.tex || material.values?.texture2d_0 || material.values?.diffuseTex;\n      const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {index: textureIndex};\n      }\n    }\n  }\n}\n\nexport function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"],"mappings":"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"}