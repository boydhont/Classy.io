{"version":3,"file":"draco-parser.js","names":["_schema","require","_getDracoSchema","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","INDEX_ITEM_SIZE","DracoParser","draco","_classCallCheck2","decoder","Decoder","metadataQuerier","MetadataQuerier","_createClass2","destroy","parseSync","arrayBuffer","options","undefined","buffer","DecoderBuffer","Init","byteLength","_disableAttributeTransforms","geometry_type","GetEncodedGeometryType","dracoGeometry","Mesh","PointCloud","dracoStatus","DecodeBufferToMesh","DecodeBufferToPointCloud","Error","ok","ptr","message","concat","error_msg","loaderData","_getDracoLoaderData","geometry","_getMeshData","boundingBox","getMeshBoundingBox","attributes","schema","getDracoSchema","indices","data","loader","header","vertexCount","num_points","metadata","_getTopLevelMetadata","_getDracoAttributes","num_attributes","num_faces","dracoAttributes","attributeId","dracoAttribute","GetAttribute","_getAttributeMetadata","unique_id","attribute_type","data_type","num_components","byte_offset","byte_stride","normalized","attribute_index","quantization","_getQuantizationTransform","quantization_transform","octahedron","_getOctahedronTransform","octahedron_transform","_getMeshAttributes","positionAttribute","topology","mode","_getTriangleStripIndices","size","_getTriangleListIndices","_i","_Object$values","values","loaderAttribute","attributeName","_deduceAttributeName","_this$_getAttributeVa","_getAttributeValues","byteOffset","byteStride","numFaces","numIndices","_malloc","GetTrianglesUInt32Array","HEAPF32","_free","dracoArray","DracoInt32Array","GetTriangleStripsFromMesh","getUint32Array","attribute","TypedArrayCtor","numComponents","numPoints","numValues","BYTES_PER_ELEMENT","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","uniqueId","_i2","_Object$entries","entries","extraAttributes","_Object$entries$_i","_slicedToArray2","attributeUniqueId","thisAttributeType","dracoAttributeConstant","attributeType","entryName","attributeNameEntry","string","dracoMetadata","GetMetadata","_getDracoMetadata","GetAttributeMetadata","result","numEntries","NumEntries","entryIndex","GetEntryName","_getDracoMetadataField","GetIntEntryArray","intArray","getInt32Array","int","GetIntEntry","GetStringEntry","double","GetDoubleEntry","_options$quantizedAtt","quantizedAttributes","_options$octahedronAt","octahedronAttributes","skipAttributes","_toConsumableArray2","_iterator","_step","dracoAttributeName","SkipAttributeTransform","_this","_options$quantizedAtt2","skip","map","type","includes","transform","AttributeQuantizationTransform","InitFromAttribute","quantization_bits","range","min_values","min_value","_this2","_options$octahedronAt2","exports","DT_FLOAT32","DT_INT8","DT_INT16","DT_INT32","DT_UINT8","DT_UINT16","DT_UINT32","DT_INVALID","GetValue"],"sources":["../../../src/lib/draco-parser.ts"],"sourcesContent":["/* eslint-disable camelcase */\n\nimport type {TypedArray, MeshAttribute, MeshGeometry} from '@loaders.gl/schema';\n\n// Draco types (input)\nimport type {\n  Draco3D,\n  Decoder,\n  Mesh,\n  PointCloud,\n  PointAttribute,\n  Metadata,\n  MetadataQuerier,\n  DracoInt32Array,\n  draco_DataType\n} from '../draco3d/draco3d-types';\n\n// Parsed data types (output)\nimport type {\n  DracoMesh,\n  DracoLoaderData,\n  DracoAttribute,\n  DracoMetadataEntry,\n  DracoQuantizationTransform,\n  DracoOctahedronTransform\n} from './draco-types';\n\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {getDracoSchema} from './utils/get-draco-schema';\n\n/**\n * @param topology - How triangle indices should be generated (mesh only)\n * @param attributeNameEntry\n * @param extraAttributes\n * @param quantizedAttributes\n * @param octahedronAttributes\n */\nexport type DracoParseOptions = {\n  topology?: 'triangle-list' | 'triangle-strip';\n  attributeNameEntry?: string;\n  extraAttributes?: {[uniqueId: string]: number};\n  quantizedAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n  octahedronAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n};\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nconst INDEX_ITEM_SIZE = 4;\n\nexport default class DracoParser {\n  draco: Draco3D;\n  decoder: Decoder;\n  metadataQuerier: MetadataQuerier;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  /**\n   * Destroy draco resources\n   */\n  destroy(): void {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  /**\n   * NOTE: caller must call `destroyGeometry` on the return value after using it\n   * @param arrayBuffer\n   * @param options\n   */\n  parseSync(arrayBuffer: ArrayBuffer, options: DracoParseOptions = {}): DracoMesh {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    this._disableAttributeTransforms(options);\n\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry =\n      geometry_type === this.draco.TRIANGULAR_MESH\n        ? new this.draco.Mesh()\n        : new this.draco.PointCloud();\n\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry as Mesh);\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        throw new Error(message);\n      }\n\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n\n      const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n\n      const data: DracoMesh = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  // Draco specific \"loader data\"\n\n  /**\n   * Extract\n   * @param dracoGeometry\n   * @param geometry_type\n   * @param options\n   * @returns\n   */\n  _getDracoLoaderData(\n    dracoGeometry: Mesh | PointCloud,\n    geometry_type,\n    options: DracoParseOptions\n  ): DracoLoaderData {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  /**\n   * Extract all draco provided information and metadata for each attribute\n   * @param dracoGeometry\n   * @param options\n   * @returns\n   */\n  _getDracoAttributes(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: DracoAttribute} {\n    const dracoAttributes: {[unique_id: number]: DracoAttribute} = {};\n\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      // Note: Draco docs do not seem clear on `GetAttribute` ids just being a zero-based index,\n      // but it does seems to work this way\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n\n        metadata\n      };\n\n      // Add transformation parameters for any attributes app wants untransformed\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n\n    return dracoAttributes;\n  }\n\n  /**\n   * Get standard loaders.gl mesh category data\n   * Extracts the geometry from draco\n   * @param dracoGeometry\n   * @param options\n   */\n  _getMeshData(\n    dracoGeometry: Mesh | PointCloud,\n    loaderData: DracoLoaderData,\n    options: DracoParseOptions\n  ): MeshGeometry {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    // For meshes, we need indices to define the faces.\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4, // GL.TRIANGLES\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5, // GL.TRIANGLE_STRIP\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    // PointCloud - must come last as Mesh inherits from PointCloud\n    return {\n      topology: 'point-list',\n      mode: 0, // GL.POINTS\n      attributes\n    };\n  }\n\n  _getMeshAttributes(\n    loaderData: DracoLoaderData,\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[attributeName: string]: MeshAttribute} {\n    const attributes: {[key: string]: MeshAttribute} = {};\n\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {value, size} = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n\n    return attributes;\n  }\n\n  // MESH INDICES EXTRACTION\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleListIndices(dracoGeometry: Mesh) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleStripIndices(dracoGeometry: Mesh) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      /* const numStrips = */ this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  /**\n   *\n   * @param dracoGeometry\n   * @param dracoAttribute\n   * @param attributeName\n   */\n  _getAttributeValues(\n    dracoGeometry: Mesh | PointCloud,\n    attribute: DracoAttribute\n  ): {value: TypedArray; size: number} {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n\n    let value: TypedArray;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(\n        dracoGeometry,\n        dracoAttribute,\n        dataType,\n        byteLength,\n        ptr\n      );\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n\n    return {value, size: numComponents};\n  }\n\n  // Attribute names\n\n  /** \n   * DRACO does not store attribute names - We need to deduce an attribute name\n   * for each attribute\n  _getAttributeNames(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: string} {\n    const attributeNames: {[unique_id: number]: string} = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const attributeName = this._deduceAttributeName(dracoAttribute, options);\n      attributeNames[attributeName] = attributeName;\n    }\n    return attributeNames;\n  }\n   */\n\n  /**\n   * Deduce an attribute name.\n   * @note DRACO does not save attribute names, just general type (POSITION, COLOR)\n   * to help optimize compression. We generate GLTF compatible names for the Draco-recognized\n   * types\n   * @param attributeData\n   */\n  _deduceAttributeName(attribute: DracoAttribute, options: DracoParseOptions): string {\n    // Deduce name based on application provided map\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(\n      options.extraAttributes || {}\n    )) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    // Deduce name based on attribute type\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        // TODO - Return unique names if there multiple attributes per type\n        // (e.g. multiple TEX_COORDS or COLORS)\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    // Look up in metadata\n    // TODO - shouldn't this have priority?\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    // Attribute of \"GENERIC\" type, we need to assign some name\n    return `CUSTOM_ATTRIBUTE_${uniqueId}`;\n  }\n\n  // METADATA EXTRACTION\n\n  /** Get top level metadata */\n  _getTopLevelMetadata(dracoGeometry: Mesh | PointCloud) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /** Get per attribute metadata */\n  _getAttributeMetadata(dracoGeometry: Mesh | PointCloud, attributeId: number) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /**\n   * Extract metadata field values\n   * @param dracoMetadata\n   * @returns\n   */\n  _getDracoMetadata(dracoMetadata: Metadata): {[entry: string]: DracoMetadataEntry} {\n    // The not so wonderful world of undocumented Draco APIs :(\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  /**\n   * Extracts possible values for one metadata entry by name\n   * @param dracoMetadata\n   * @param entryName\n   */\n  _getDracoMetadataField(dracoMetadata: Metadata, entryName: string): DracoMetadataEntry {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      // Draco metadata fields can hold int32 arrays\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)\n\n  /** Skip transforms for specific attribute types */\n  _disableAttributeTransforms(options: DracoParseOptions) {\n    const {quantizedAttributes = [], octahedronAttributes = []} = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  /**\n   * Extract (and apply?) Position Transform\n   * @todo not used\n   */\n  _getQuantizationTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoQuantizationTransform | null {\n    const {quantizedAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map((i) => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  _getOctahedronTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoOctahedronTransform | null {\n    const {octahedronAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes\n      .map((type) => this.decoder[type])\n      .includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  // HELPERS\n}\n\n/**\n * Get draco specific data type by TypedArray constructor type\n * @param attributeType\n * @returns draco specific data type\n */\nfunction getDracoDataType(draco: Draco3D, attributeType: any): draco_DataType {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getInt32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getUint32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n"],"mappings":"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"}