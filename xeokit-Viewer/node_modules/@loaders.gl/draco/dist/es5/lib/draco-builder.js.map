{"version":3,"file":"draco-builder.js","names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","DracoBuilder","draco","_classCallCheck2","default","_defineProperty2","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","_createClass2","key","value","destroy","destroyEncodedObject","object","encodeSync","mesh","options","arguments","length","undefined","log","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","_getAttributesFromMesh","attributes","_objectSpread","indices","dracoPointCloud","PointCloud","metadata","_addGeometryMetadata","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","concat","num_points","num_attributes","dracoInt8ArrayToArrayBuffer","dracoMesh","Mesh","_createDracoMesh","EncodeMeshToDracoBuffer","_this$dracoEncoder","SetSpeedOptions","apply","_toConsumableArray2","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","positions","_getPositionAttribute","vertexCount","attributeName","uniqueId","_addAttributeToMesh","_addAttributeMetadata","name","error","ArrayBuffer","isView","type","_getDracoAttributeType","size","numFaces","AddFacesToMesh","builder","buffer","constructor","Int8Array","AddInt8Attribute","Int16Array","AddInt16Attribute","Int32Array","AddInt32Attribute","Uint8Array","Uint8ClampedArray","AddUInt8Attribute","Uint16Array","AddUInt16Attribute","Uint32Array","AddUInt32Attribute","Float32Array","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType","dracoGeometry","dracoMetadata","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","_iterator","_createForOfIteratorHelper","getEntries","_step","s","n","done","_step$value","_slicedToArray2","_typeof2","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","err","e","f","exports","byteLength","outputBuffer","outputData","i","GetValue","container","hasEntriesFunc","entries","hasOwnProperty","Object"],"sources":["../../../src/lib/draco-builder.ts"],"sourcesContent":["/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray} from '@loaders.gl/schema';\nimport type {DracoMesh} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMesh, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"],"mappings":"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"}