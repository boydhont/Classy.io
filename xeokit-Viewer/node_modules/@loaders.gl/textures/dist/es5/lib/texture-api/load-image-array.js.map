{"version":3,"file":"load-image-array.js","names":["_images","require","_loadImage","_deepLoad","loadImageTextureArray","_x","_x2","_loadImageTextureArray","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","count","getUrl","options","imageUrls","_args","wrap","_callee$","_context","prev","next","length","undefined","getImageArrayUrls","sent","deepLoad","ImageLoader","parse","abrupt","stop","_x3","_x4","_getImageArrayUrls","_callee2","promises","index","promise","_args2","_callee2$","_context2","getImageUrls","push","Promise","all"],"sources":["../../../../src/lib/texture-api/load-image-array.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\nexport async function loadImageTextureArray(\n  count: number,\n  getUrl: GetUrl,\n  options = {}\n): Promise<any> {\n  const imageUrls = await getImageArrayUrls(count, getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageArrayUrls(count: number, getUrl: GetUrl, options = {}): Promise<any> {\n  const promises: Promise<any>[] = [];\n  for (let index = 0; index < count; index++) {\n    const promise = getImageUrls(getUrl, options, {index});\n    promises.push(promise);\n  }\n  return await Promise.all(promises);\n}\n"],"mappings":";;;;;;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AAAqC,SAEfG,qBAAqBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,uBAAA;EAAAA,sBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAApC,SAAAC,QACLC,KAAa,EACbC,MAAc;IAAA,IAAAC,OAAA;MAAAC,SAAA;MAAAC,KAAA,GAAAV,SAAA;IAAA,OAAAG,YAAA,CAAAD,OAAA,CAAAS,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACdP,OAAO,GAAAE,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UAAAG,QAAA,CAAAE,IAAA;UAAA,OAEYG,iBAAiB,CAACZ,KAAK,EAAEC,MAAM,EAAEC,OAAO,CAAC;QAAA;UAA3DC,SAAS,GAAAI,QAAA,CAAAM,IAAA;UAAAN,QAAA,CAAAE,IAAA;UAAA,OACF,IAAAK,kBAAQ,EAACX,SAAS,EAAEY,mBAAW,CAACC,KAAK,EAAEd,OAAO,CAAC;QAAA;UAAA,OAAAK,QAAA,CAAAU,MAAA,WAAAV,QAAA,CAAAM,IAAA;QAAA;QAAA;UAAA,OAAAN,QAAA,CAAAW,IAAA;MAAA;IAAA,GAAAnB,OAAA;EAAA,CAC7D;EAAA,OAAAP,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEqBkB,iBAAiBA,CAAAO,GAAA,EAAAC,GAAA;EAAA,OAAAC,kBAAA,CAAA5B,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA2B,mBAAA;EAAAA,kBAAA,OAAA1B,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAhC,SAAAwB,SAAiCtB,KAAa,EAAEC,MAAc;IAAA,IAAAC,OAAA;MAAAqB,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,MAAA,GAAAhC,SAAA;IAAA,OAAAG,YAAA,CAAAD,OAAA,CAAAS,IAAA,UAAAsB,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAApB,IAAA,GAAAoB,SAAA,CAAAnB,IAAA;QAAA;UAAEP,OAAO,GAAAwB,MAAA,CAAAhB,MAAA,QAAAgB,MAAA,QAAAf,SAAA,GAAAe,MAAA,MAAG,CAAC,CAAC;UAC3EH,QAAwB,GAAG,EAAE;UACnC,KAASC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGxB,KAAK,EAAEwB,KAAK,EAAE,EAAE;YACpCC,OAAO,GAAG,IAAAI,uBAAY,EAAC5B,MAAM,EAAEC,OAAO,EAAE;cAACsB,KAAK,EAALA;YAAK,CAAC,CAAC;YACtDD,QAAQ,CAACO,IAAI,CAACL,OAAO,CAAC;UACxB;UAACG,SAAA,CAAAnB,IAAA;UAAA,OACYsB,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;QAAA;UAAA,OAAAK,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAf,IAAA;QAAA;QAAA;UAAA,OAAAe,SAAA,CAAAV,IAAA;MAAA;IAAA,GAAAI,QAAA;EAAA,CACnC;EAAA,OAAAD,kBAAA,CAAA5B,KAAA,OAAAC,SAAA;AAAA"}