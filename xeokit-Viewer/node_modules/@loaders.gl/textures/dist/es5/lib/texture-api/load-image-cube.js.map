{"version":3,"file":"load-image-cube.js","names":["_images","require","_loadImage","_deepLoad","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","getImageCubeUrls","_x","_x2","_getImageCubeUrls","_asyncToGenerator2","_regenerator","mark","_callee","getUrl","options","urls","promises","index","_loop","wrap","_callee$","_context2","prev","next","promise","_loop$","_context","getImageUrls","then","url","stop","delegateYield","Promise","all","abrupt","loadImageTextureCube","_x3","_loadImageTextureCube","_callee2","_args3","_callee2$","_context3","undefined","sent","deepLoad","ImageLoader","parse"],"sources":["../../../../src/lib/texture-api/load-image-cube.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n\nconst CUBE_FACES = [\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative'}\n];\n\nexport type ImageCubeTexture = {\n  GL_TEXTURE_CUBE_MAP_POSITIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Z: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: any;\n};\n\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl: GetUrl, options: UrlOptions) {\n  // Calculate URLs\n  const urls: Record<number, string | string[]> = {};\n  const promises: Promise<any>[] = [];\n\n  let index = 0;\n  for (let i = 0; i < CUBE_FACES.length; ++i) {\n    const face = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {...face, index: index++}).then((url) => {\n      urls[face.face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return urls;\n}\n\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageTextureCube(\n  getUrl: GetUrl,\n  options = {}\n): Promise<ImageCubeTexture> {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return (await deepLoad(urls, ImageLoader.parse, options)) as ImageCubeTexture;\n}\n"],"mappings":"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"}