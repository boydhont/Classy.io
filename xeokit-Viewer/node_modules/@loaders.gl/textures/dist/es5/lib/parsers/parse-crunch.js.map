{"version":3,"file":"parse-crunch.js","names":["_crunchModuleLoader","require","_glExtensions","_loaderUtils","_parseDds","_extractMipmapImages","_DXT_FORMAT_MAP","CRN_FORMAT","cCRNFmtInvalid","cCRNFmtDXT1","cCRNFmtDXT3","cCRNFmtDXT5","DXT_FORMAT_MAP","_defineProperty2","default","pixelFormat","GL_EXTENSIONS_CONSTANTS","COMPRESSED_RGB_S3TC_DXT1_EXT","sizeFunction","getDxt1LevelSize","COMPRESSED_RGBA_S3TC_DXT3_EXT","getDxtXLevelSize","COMPRESSED_RGBA_S3TC_DXT5_EXT","cachedDstSize","dst","parseCrunch","_x","_x2","_parseCrunch","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","data","options","crunchModule","srcSize","bytes","src","format","mipMapLevels","width","height","dstSize","i","image","wrap","_callee$","_context","prev","next","loadCrunchModule","sent","byteLength","Uint8Array","_malloc","arrayBufferCopy","HEAPU8","_crn_get_dxt_format","assert","Boolean","_crn_get_levels","_crn_get_width","_crn_get_height","_free","_crn_decompress","buffer","slice","abrupt","extractMipmapImages","internalFormat","stop","srcData","dstData","dstByteOffset","numBytes","dst32Offset","tail","src32","Uint32Array","dst32","length"],"sources":["../../../../src/lib/parsers/parse-crunch.ts"],"sourcesContent":["import type {TextureLevel} from '@loaders.gl/schema';\nimport {loadCrunchModule} from './crunch-module-loader';\nimport {GL_EXTENSIONS_CONSTANTS} from '../gl-extensions';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {getDxt1LevelSize, getDxtXLevelSize} from './parse-dds';\nimport {extractMipmapImages} from '../utils/extract-mipmap-images';\n\n// Taken from crnlib.h\nconst CRN_FORMAT = {\n  cCRNFmtInvalid: -1,\n\n  cCRNFmtDXT1: 0,\n  // cCRNFmtDXT3 is not currently supported when writing to CRN - only DDS.\n  cCRNFmtDXT3: 1,\n  cCRNFmtDXT5: 2\n\n  // Crunch supports more formats than this.\n};\n\n/** Mapping of Crunch formats to DXT formats. */\nconst DXT_FORMAT_MAP = {\n  [CRN_FORMAT.cCRNFmtDXT1]: {\n    pixelFormat: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT,\n    sizeFunction: getDxt1LevelSize\n  },\n  [CRN_FORMAT.cCRNFmtDXT3]: {\n    pixelFormat: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    sizeFunction: getDxtXLevelSize\n  },\n  [CRN_FORMAT.cCRNFmtDXT5]: {\n    pixelFormat: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    sizeFunction: getDxtXLevelSize\n  }\n};\n\nlet cachedDstSize = 0;\nlet dst: number;\n\n/**\n * Parse texture data as \"CRN\" format.\n * Function is \"async\" as emscriptified decoder module is loaded asyncronously\n * @param data - binary data of compressed texture\n * @returns Promise of Array of the texture levels\n */\nexport async function parseCrunch(data, options: any): Promise<TextureLevel[]> {\n  const crunchModule = await loadCrunchModule(options);\n\n  // Copy the contents of the arrayBuffer into emscriptens heap.\n  const srcSize = data.byteLength;\n  const bytes = new Uint8Array(data);\n  const src = crunchModule._malloc(srcSize);\n  arrayBufferCopy(bytes, crunchModule.HEAPU8, src, srcSize);\n\n  // Determine what type of compressed data the file contains.\n  const format = crunchModule._crn_get_dxt_format(src, srcSize);\n  assert(Boolean(DXT_FORMAT_MAP[format]), 'Unsupported format');\n\n  // Gather basic metrics about the DXT data.\n  const mipMapLevels = crunchModule._crn_get_levels(src, srcSize);\n  const width = crunchModule._crn_get_width(src, srcSize);\n  const height = crunchModule._crn_get_height(src, srcSize);\n  // const bytesPerBlock = crunchModule._crn_get_bytes_per_block(src, srcSize);\n\n  // Determine the size of the decoded DXT data.\n  const sizeFunction = DXT_FORMAT_MAP[format].sizeFunction;\n  let dstSize = 0;\n  for (let i = 0; i < mipMapLevels; ++i) {\n    dstSize += sizeFunction(width >> i, height >> i);\n  }\n\n  // Allocate enough space on the emscripten heap to hold the decoded DXT data\n  // or reuse the existing allocation if a previous call to this function has\n  // already acquired a large enough buffer.\n  if (cachedDstSize < dstSize) {\n    if (dst) {\n      crunchModule._free(dst);\n    }\n    dst = crunchModule._malloc(dstSize);\n    cachedDstSize = dstSize;\n  }\n\n  // Decompress the DXT data from the Crunch file into the allocated space.\n  crunchModule._crn_decompress(src, srcSize, dst, dstSize, 0, mipMapLevels);\n\n  // Release the crunch file data from the emscripten heap.\n  crunchModule._free(src);\n\n  const image = new Uint8Array(crunchModule.HEAPU8.buffer, dst, dstSize).slice();\n  return extractMipmapImages(image, {\n    mipMapLevels,\n    width,\n    height,\n    sizeFunction,\n    internalFormat: DXT_FORMAT_MAP[format].pixelFormat\n  });\n}\n\n/**\n * Copy an array of bytes into or out of the emscripten heap\n * @param {Uint8Array} srcData - Source data array\n * @param {Uint8Array} dstData - Destination data array\n * @param {number} dstByteOffset - Destination data offset\n * @param {number} numBytes - number of bytes to copy\n * @returns {void}\n */\nfunction arrayBufferCopy(srcData, dstData, dstByteOffset, numBytes) {\n  let i;\n  const dst32Offset = dstByteOffset / 4;\n  const tail = numBytes % 4;\n  const src32 = new Uint32Array(srcData.buffer, 0, (numBytes - tail) / 4);\n  const dst32 = new Uint32Array(dstData.buffer);\n  for (i = 0; i < src32.length; i++) {\n    dst32[dst32Offset + i] = src32[i];\n  }\n  for (i = numBytes - tail; i < numBytes; i++) {\n    dstData[dstByteOffset + i] = srcData[i];\n  }\n}\n"],"mappings":"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"}