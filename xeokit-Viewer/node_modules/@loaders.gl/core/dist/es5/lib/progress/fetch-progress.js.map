{"version":3,"file":"fetch-progress.js","names":["fetchProgress","_x","_x2","_fetchProgress","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee2","response","onProgress","onDone","onError","body","contentLength","totalBytes","progressStream","_args2","wrap","_callee2$","_context2","prev","next","length","undefined","sent","ok","abrupt","headers","get","parseInt","ReadableStream","getReader","start","controller","_callee","reader","_callee$","_context","read","stop","Response","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_read","_callee3","loadedBytes","_yield$reader$read","done","value","percent","_callee3$","_context3","close","byteLength","Math","round","enqueue","t0","error"],"sources":["../../../../src/lib/progress/fetch-progress.ts"],"sourcesContent":["// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport default async function fetchProgress(\n  response: Response | Promise<Response>,\n  onProgress: any, // TODO better callback types\n  onDone = () => {},\n  onError = () => {}\n) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  const body = response.body;\n  if (!body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength ? parseInt(contentLength) : 0;\n  if (!(totalBytes > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n\n  return new Response(progressStream);\n}\n\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {done, value} = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round((loadedBytes / totalBytes) * 100);\n    onProgress(percent, {loadedBytes, totalBytes});\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}\n"],"mappings":"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"}