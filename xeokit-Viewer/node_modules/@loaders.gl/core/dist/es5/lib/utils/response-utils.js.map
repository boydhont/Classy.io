{"version":3,"file":"response-utils.js","names":["_isType","require","_resourceUtils","makeResponse","_x","_makeResponse","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","resource","headers","contentLength","url","type","initialDataUrl","response","wrap","_callee$","_context","prev","next","isResponse","abrupt","getResourceContentLength","String","getResourceUrl","getResourceMIMEType","getInitialDataUrl","sent","TextEncoder","encode","Response","Object","defineProperty","value","stop","checkResponse","_x2","_checkResponse","_callee2","message","_callee2$","_context2","ok","getResponseError","Error","checkResponseSync","concat","status","statusText","length","slice","_x3","_getResponseError","_callee3","contentType","text","_callee3$","_context3","get","includes","t0","t1","t2","call","t3","_x4","_getInitialDataUrl","_callee4","INITIAL_DATA_LENGTH","blobSlice","base64","_callee4$","_context4","Blob","Promise","resolve","reader","FileReader","onload","event","_event$target","target","result","readAsDataURL","ArrayBuffer","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","i","byteLength","fromCharCode","btoa"],"sources":["../../../../src/lib/utils/response-utils.ts"],"sourcesContent":["import {isResponse} from '../../javascript-utils/is-type';\nimport {getResourceContentLength, getResourceUrl, getResourceMIMEType} from './resource-utils';\n\n/**\n * Returns a Response object\n * Adds content-length header when possible\n *\n * @param resource\n */\nexport async function makeResponse(resource: any): Promise<Response> {\n  if (isResponse(resource)) {\n    return resource;\n  }\n\n  // Add content-length header if possible\n  const headers: {[header: string]: string} = {};\n\n  const contentLength = getResourceContentLength(resource);\n  if (contentLength >= 0) {\n    headers['content-length'] = String(contentLength);\n  }\n\n  // `new Response(File)` does not preserve content-type and URL\n  // so we add them here\n  const url = getResourceUrl(resource);\n  const type = getResourceMIMEType(resource);\n  if (type) {\n    headers['content-type'] = type;\n  }\n\n  // Add a custom header with initial bytes if available\n  const initialDataUrl = await getInitialDataUrl(resource);\n  if (initialDataUrl) {\n    headers['x-first-bytes'] = initialDataUrl;\n  }\n\n  // TODO - is this the best way of handling strings?\n  // Maybe package as data URL instead?\n  if (typeof resource === 'string') {\n    // Convert to ArrayBuffer to avoid Response treating it as a URL\n    resource = new TextEncoder().encode(resource);\n  }\n\n  // Attempt to create a Response from the resource, adding headers and setting url\n  const response = new Response(resource, {headers});\n  // We can't control `Response.url` via constructor, use a property override to record URL.\n  Object.defineProperty(response, 'url', {value: url});\n  return response;\n}\n\n/**\n * Checks response status (async) and throws a helpful error message if status is not OK.\n * @param response\n */\nexport async function checkResponse(response: Response): Promise<void> {\n  if (!response.ok) {\n    const message = await getResponseError(response);\n    throw new Error(message);\n  }\n}\n\n/**\n * Checks response status (sync) and throws a helpful error message if status is not OK.\n * @param response\n */\nexport function checkResponseSync(response: Response): void {\n  if (!response.ok) {\n    let message = `${response.status} ${response.statusText}`;\n    message = message.length > 60 ? `${message.slice(0, 60)}...` : message;\n    throw new Error(message);\n  }\n}\n\n// HELPERS\n\nasync function getResponseError(response): Promise<string> {\n  let message = `Failed to fetch resource ${response.url} (${response.status}): `;\n  try {\n    const contentType = response.headers.get('Content-Type');\n    let text = response.statusText;\n    if (contentType.includes('application/json')) {\n      text += ` ${await response.text()}`;\n    }\n    message += text;\n    message = message.length > 60 ? `${message.slice(0, 60)}...` : message;\n  } catch (error) {\n    // eslint forbids return in a finally statement, so we just catch here\n  }\n  return message;\n}\n\nasync function getInitialDataUrl(resource): Promise<string | null> {\n  const INITIAL_DATA_LENGTH = 5;\n  if (typeof resource === 'string') {\n    return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;\n  }\n  if (resource instanceof Blob) {\n    const blobSlice = resource.slice(0, 5);\n    return await new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event?.target?.result as string);\n      reader.readAsDataURL(blobSlice);\n    });\n  }\n  if (resource instanceof ArrayBuffer) {\n    const slice = resource.slice(0, INITIAL_DATA_LENGTH);\n    const base64 = arrayBufferToBase64(slice);\n    return `data:base64,${base64}`;\n  }\n  return null;\n}\n\n// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n"],"mappings":"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"}