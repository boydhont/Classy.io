{"version":3,"file":"get-data.js","names":["_loaderUtils","require","_isType","_makeIterator","_responseUtils","ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","options","text","isBuffer","buffer","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","_x","_x2","_x3","_getArrayBufferOrStringFromData","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","isArrayBuffer","response","wrap","_callee$","_context3","prev","next","abrupt","isBlob","makeResponse","sent","isResponse","checkResponse","t0","isReadableStream","makeIterator","isIterable","isAsyncIterable","concatenateArrayBuffersAsync","stop","getAsyncIterableFromData","_x4","_x5","_getAsyncIterableFromData","_callee2","body","_callee2$","_context4","isIterator","Symbol","asyncIterator","getIterableFromData","getReadableStream","_x6","_getReadableStream","_callee3","_callee3$","_context5","oneChunk","oneChunk$","_context","_context2","iterator"],"sources":["../../../../src/lib/loader-utils/get-data.ts"],"sourcesContent":["import type {\n  DataType,\n  SyncDataType,\n  BatchableDataType,\n  Loader,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(\n  data: SyncDataType,\n  loader: Loader,\n  options: LoaderOptions\n): ArrayBuffer | string {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    // @ts-ignore\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(\n  data: DataType,\n  loader: Loader,\n  options: LoaderOptions\n): Promise<ArrayBuffer | string> {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    // @ts-expect-error TS2559 options type\n    data = makeIterator(data as ReadableStream, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIterableFromData(\n  data: BatchableDataType,\n  options: LoaderOptions\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  if (isIterator(data)) {\n    return data as AsyncIterable<ArrayBuffer>;\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(response);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const body = await response.body;\n    // TODO - body can be null?\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data as Blob | ReadableStream, options as any);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\n\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\n  if (isReadableStream(data)) {\n    return data as ReadableStream;\n  }\n  if (isResponse(data)) {\n    // @ts-ignore\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  // @ts-ignore\n  return response.body;\n}\n\n// HELPERS\n\nfunction getIterableFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"mappings":"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"}