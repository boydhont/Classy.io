{"version":3,"file":"encode.js","names":["_loaderUtils","require","_workerUtils","_writeFile","_fetchFile","_loaderOptions","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Promise","reject","done","resolve","value","then","n","next","prototype","return","_return","ret","throw","_throw","thr","encode","_x","_x2","_x3","_encode","_asyncToGenerator2","_regenerator","mark","_callee","data","writer","options","globalOptions","batches","chunks","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","tmpInputFilename","tmpOutputFilename","outputFilename","response","wrap","_callee$","_context","prev","getLoaderOptions","canEncodeWithWorker","processOnWorker","abrupt","sent","encodeSync","encodeText","t0","TextEncoder","t1","encodeInBatches","t2","finish","concatenateArrayBuffers","isBrowser","encodeURLtoURL","getTemporaryFilename","writeFile","fetchFile","arrayBuffer","Error","stop","_x4","_x5","_x6","_encodeText","_callee2","_callee2$","_context2","text","TextDecoder","decode","dataIterator","getIterator","_x7","_x8","_x9","_x10","_encodeURLtoURL","_callee3","inputUrl","outputUrl","_callee3$","_context3","resolvePath","table","start","end","filename","concat"],"sources":["../../../../src/lib/api/encode.ts"],"sourcesContent":["import {Writer, WriterOptions, canEncodeWithWorker} from '@loaders.gl/loader-utils';\nimport {processOnWorker} from '@loaders.gl/worker-utils';\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {getLoaderOptions} from './loader-options';\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport async function encode(\n  data: any,\n  writer: Writer,\n  options?: WriterOptions\n): Promise<ArrayBuffer> {\n  const globalOptions = getLoaderOptions() as WriterOptions;\n  // const globalOptions: WriterOptions = {}; // getWriterOptions();\n  options = {...globalOptions, ...options};\n  if (canEncodeWithWorker(writer, options)) {\n    return await processOnWorker(writer, data, options);\n  }\n\n  // TODO Merge default writer options with options argument like it is done in load module.\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks: any[] = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport function encodeSync(data: any, writer: Writer, options?: WriterOptions): ArrayBuffer {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport async function encodeText(\n  data: any,\n  writer: Writer,\n  options?: WriterOptions\n): Promise<string> {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeInBatches(\n  data: any,\n  writer: Writer,\n  options?: WriterOptions\n): AsyncIterable<ArrayBuffer> {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\n/**\n * Encode data stored in a file (on disk) to another file.\n * @note Node.js only. This function enables using command-line converters as \"writers\".\n */\nexport async function encodeURLtoURL(\n  inputUrl,\n  outputUrl,\n  writer: Writer,\n  options\n): Promise<string> {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n\n/**\n * @todo TODO - this is an unacceptable hack!!!\n */\nfunction getIterator(data) {\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\n/**\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename: string): string {\n  return `/tmp/${filename}`;\n}\n"],"mappings":"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"}