{"version":3,"file":"load-in-batches.js","names":["_normalizeLoader","require","_getFetchFunction","_parseInBatches","loadInBatches","files","loaders","options","context","Array","isArray","isLoaderObject","undefined","fetch","getFetchFunction","loadOneFileInBatches","promises","map","file","_x","_x2","_x3","_x4","_loadOneFileInBatches","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","url","response","wrap","_callee$","_context","prev","next","sent","parseInBatches","abrupt","stop"],"sources":["../../../../src/lib/api/load-in-batches.ts"],"sourcesContent":["import type {LoaderWithParser, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/get-fetch-function';\n\nimport {parseInBatches} from './parse-in-batches';\n\ntype FileType = string | File | Blob | Response | (string | File | Blob | Response)[] | FileList;\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport function loadInBatches(\n  files: FileType,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(\n  files: FileType[] | FileList,\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>>;\n\nexport function loadInBatches(files, loaders, options, context) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map((file) => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n"],"mappings":";;;;;;;;;AACA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AAEA,IAAAE,eAAA,GAAAF,OAAA;AAyBO,SAASG,aAAaA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAE9D,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,OAAO,CAAC,IAAI,CAAC,IAAAK,+BAAc,EAACL,OAAO,CAAC,EAAE;IACvDE,OAAO,GAAGI,SAAS;IACnBL,OAAO,GAAGD,OAAO;IACjBA,OAAO,GAAG,IAAI;EAChB;EAGA,IAAMO,KAAK,GAAG,IAAAC,kCAAgB,EAACP,OAAO,IAAI,CAAC,CAAC,CAAC;EAG7C,IAAI,CAACE,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;IACzB,OAAOU,oBAAoB,CAACV,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEM,KAAK,CAAC;EAC7D;EAGA,IAAMG,QAAQ,GAAGX,KAAK,CAACY,GAAG,CAAC,UAACC,IAAI;IAAA,OAAKH,oBAAoB,CAACG,IAAI,EAAEZ,OAAO,EAAEC,OAAO,EAAEM,KAAK,CAAC;EAAA,EAAC;EAGzF,OAAOG,QAAQ;AACjB;AAAC,SAEcD,oBAAoBA,CAAAI,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,sBAAA;EAAAA,qBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAnC,SAAAC,QAAoCZ,IAAI,EAAEZ,OAAO,EAAEC,OAAO,EAAEM,KAAK;IAAA,IAAAkB,GAAA,EAAAC,QAAA;IAAA,OAAAJ,YAAA,CAAAD,OAAA,CAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,MAC3D,OAAOnB,IAAI,KAAK,QAAQ;YAAAiB,QAAA,CAAAE,IAAA;YAAA;UAAA;UACpBN,GAAG,GAAGb,IAAI;UAAAiB,QAAA,CAAAE,IAAA;UAAA,OACOxB,KAAK,CAACkB,GAAG,CAAC;QAAA;UAA3BC,QAAQ,GAAAG,QAAA,CAAAG,IAAA;UAAAH,QAAA,CAAAE,IAAA;UAAA,OACD,IAAAE,8BAAc,EAACP,QAAQ,EAAE1B,OAAO,EAAEC,OAAO,CAAC;QAAA;UAAA,OAAA4B,QAAA,CAAAK,MAAA,WAAAL,QAAA,CAAAG,IAAA;QAAA;UAAAH,QAAA,CAAAE,IAAA;UAAA,OAE5C,IAAAE,8BAAc,EAACrB,IAAI,EAAEZ,OAAO,EAAEC,OAAO,CAAC;QAAA;UAAA,OAAA4B,QAAA,CAAAK,MAAA,WAAAL,QAAA,CAAAG,IAAA;QAAA;QAAA;UAAA,OAAAH,QAAA,CAAAM,IAAA;MAAA;IAAA,GAAAX,OAAA;EAAA,CACpD;EAAA,OAAAP,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}