{"version":3,"file":"select-loader.js","names":["_loaderUtils","require","_normalizeLoader","_log","_resourceUtils","_registerLoaders","_isType","_urlUtils","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","EXT_PATTERN","selectLoader","_x","_selectLoader","_asyncToGenerator2","_regenerator","mark","_callee","data","loaders","options","context","loader","_args","wrap","_callee$","_context","prev","undefined","validHTTPResponse","abrupt","selectLoaderSync","nothrow","isBlob","arrayBuffer","sent","Error","getNoValidLoaderMessage","stop","normalizeLoader","candidateLoaders","concat","ignoreRegisteredLoaders","_candidateLoaders","_toConsumableArray2","getRegisteredLoaders","normalizeLoaders","selectLoaderInternal","url","getResourceUrl","type","getResourceMIMEType","testUrl","stripQueryString","reason","mimeType","findLoaderByMIMEType","findLoaderByUrl","findLoaderByInitialBytes","getFirstCharacters","fallbackMimeType","_loader","log","Response","status","message","path","filename","firstCharacters","_iterator","_step","match","exec","extension","findLoaderByExtension","toLowerCase","_iterator2","_step2","_iterator3","extensions","_step3","loaderExtension","_iterator4","_step4","mimeTypes","includes","id","_iterator5","_step5","testDataAgainstText","ArrayBuffer","isView","testDataAgainstBinary","buffer","byteOffset","testText","tests","some","startsWith","testBinary","compareArrayBuffers","byteLength","_typeof2","magic","getMagicString","dataView","DataView","String","fromCharCode","getUint8"],"sources":["../../../../src/lib/api/select-loader.ts"],"sourcesContent":["import type {LoaderContext, LoaderOptions, Loader} from '@loaders.gl/loader-utils';\nimport {compareArrayBuffers, path} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {log} from '../utils/log';\nimport {getResourceUrl, getResourceMIMEType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport {stripQueryString} from '../utils/url-utils';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport async function selectLoader(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<Loader | null> {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // First make a sync attempt, disabling exceptions\n  let loader = selectLoaderSync(data, loaders, {...options, nothrow: true}, context);\n  if (loader) {\n    return loader;\n  }\n\n  // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n  // to see if we can detect by initial content\n  if (isBlob(data)) {\n    data = await (data as Blob).slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport function selectLoaderSync(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Loader | null {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behavior be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    // TODO - remove support for legacy loaders\n    return normalizeLoader(loaders);\n  }\n\n  // Build list of candidate loaders that will be searched in order for a match\n  let candidateLoaders: Loader[] = [];\n  // First search supplied loaders\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  // Then fall back to registered loaders\n  if (!options?.ignoreRegisteredLoaders) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  // TODO - remove support for legacy loaders\n  normalizeLoaders(candidateLoaders);\n\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/** Implements loaders selection logic */\n// eslint-disable-next-line complexity\nfunction selectLoaderInternal(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[],\n  options?: LoaderOptions,\n  context?: LoaderContext\n) {\n  const url = getResourceUrl(data);\n  const type = getResourceMIMEType(data);\n\n  const testUrl = stripQueryString(url) || context?.url;\n\n  let loader: Loader | null = null;\n  let reason: string = '';\n\n  // if options.mimeType is supplied, it takes precedence\n  if (options?.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options?.mimeType);\n    reason = `match forced by supplied MIME type ${options?.mimeType}`;\n  }\n\n  // Look up loader by url\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  reason = reason || (loader ? `matched url ${testUrl}` : '');\n\n  // Look up loader by mime type\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  reason = reason || (loader ? `matched MIME type ${type}` : '');\n\n  // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  reason = reason || (loader ? `matched initial data ${getFirstCharacters(data)}` : '');\n\n  // Look up loader by fallback mime type\n  loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);\n  reason = reason || (loader ? `matched fallback MIME type ${type}` : '');\n\n  if (reason) {\n    log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);\n  }\n\n  return loader;\n}\n\n/** Check HTTP Response */\nfunction validHTTPResponse(data: any): boolean {\n  // HANDLE HTTP status\n  if (data instanceof Response) {\n    // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Generate a helpful message to help explain why loader selection failed. */\nfunction getNoValidLoaderMessage(data): string {\n  const url = getResourceUrl(data);\n  const type = getResourceMIMEType(data);\n\n  let message = 'No valid loader found (';\n  message += url ? `${path.filename(url)}, ` : 'no url provided, ';\n  message += `MIME type: ${type ? `\"${type}\"` : 'not provided'}, `;\n  // First characters are only accessible when called on data (string or arrayBuffer).\n  const firstCharacters: string = data ? getFirstCharacters(data) : '';\n  message += firstCharacters ? ` first bytes: \"${firstCharacters}\"` : 'first bytes: not available';\n  message += ')';\n  return message;\n}\n\nfunction normalizeLoaders(loaders: Loader[]): void {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders: Loader[], url?: string): Loader | null {\n  // Get extension\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\n\nfunction findLoaderByExtension(loaders: Loader[], extension: string): Loader | null {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => data.startsWith(test));\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length: number = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"],"mappings":"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"}