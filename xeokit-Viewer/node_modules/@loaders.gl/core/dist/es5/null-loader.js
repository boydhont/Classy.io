"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NullWorkerLoader = exports.NullLoader = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));
var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));
function _asyncIterator(iterable) { var method, async, sync, retry = 2; for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = "@@asyncIterator", sync = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }
var VERSION = typeof "3.4.14" !== 'undefined' ? "3.4.14" : 'latest';
var NullWorkerLoader = {
  name: 'Null loader',
  id: 'null',
  module: 'core',
  version: VERSION,
  worker: true,
  mimeTypes: ['application/x.empty'],
  extensions: ['null'],
  tests: [function () {
    return false;
  }],
  options: {
    null: {}
  }
};
exports.NullWorkerLoader = NullWorkerLoader;
function parseSync(arrayBuffer, options, context) {
  if (!options.null.echoParameters) return null;
  context = context && JSON.parse(JSON.stringify(context));
  return {
    arrayBuffer: arrayBuffer,
    options: options,
    context: context
  };
}
var NullLoader = {
  name: 'Null loader',
  id: 'null',
  module: 'core',
  version: VERSION,
  mimeTypes: ['application/x.empty'],
  extensions: ['null'],
  parse: function () {
    var _parse = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(arrayBuffer, options, context) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", parseSync(arrayBuffer, options, context));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function parse(_x4, _x5, _x6) {
      return _parse.apply(this, arguments);
    }
    return parse;
  }(),
  parseSync: parseSync,
  parseInBatches: function () {
    var _generator = (0, _wrapAsyncGenerator2.default)(_regenerator.default.mark(function _callee2(asyncIterator, options, context) {
      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _iteratorAbruptCompletion = false;
            _didIteratorError = false;
            _context2.prev = 2;
            _iterator = _asyncIterator(asyncIterator);
          case 4:
            _context2.next = 6;
            return (0, _awaitAsyncGenerator2.default)(_iterator.next());
          case 6:
            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {
              _context2.next = 13;
              break;
            }
            batch = _step.value;
            _context2.next = 10;
            return parseSync(batch, options, context);
          case 10:
            _iteratorAbruptCompletion = false;
            _context2.next = 4;
            break;
          case 13:
            _context2.next = 19;
            break;
          case 15:
            _context2.prev = 15;
            _context2.t0 = _context2["catch"](2);
            _didIteratorError = true;
            _iteratorError = _context2.t0;
          case 19:
            _context2.prev = 19;
            _context2.prev = 20;
            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {
              _context2.next = 24;
              break;
            }
            _context2.next = 24;
            return (0, _awaitAsyncGenerator2.default)(_iterator.return());
          case 24:
            _context2.prev = 24;
            if (!_didIteratorError) {
              _context2.next = 27;
              break;
            }
            throw _iteratorError;
          case 27:
            return _context2.finish(24);
          case 28:
            return _context2.finish(19);
          case 29:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);
    }));
    function generator(_x, _x2, _x3) {
      return _generator.apply(this, arguments);
    }
    return generator;
  }(),
  tests: [function () {
    return false;
  }],
  options: {
    null: {
      echoParameters: false
    }
  }
};
exports.NullLoader = NullLoader;
//# sourceMappingURL=null-loader.js.map