{"version":3,"file":"make-dom-stream.js","names":["makeStream","source","options","iterator","Symbol","asyncIterator","ReadableStream","type","pull","controller","_asyncToGenerator2","default","_regenerator","mark","_callee","_yield$iterator$next","done","value","wrap","_callee$","_context","prev","next","sent","close","enqueue","Uint8Array","t0","error","stop","cancel","_callee2","_iterator$return","_callee2$","_context2","return","call","_objectSpread","highWaterMark","Math","pow"],"sources":["../../../../src/iterators/make-stream/make-dom-stream.ts"],"sourcesContent":["export type MakeStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            // @ts-expect-error Unclear why value is not correctly typed\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n"],"mappings":";;;;;;;;;;;;AAaO,SAASA,UAAUA,CACxBC,MAA0D,EAC1DC,OAA2B,EACX;EAChB,IAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAM,CAACC,aAAa,CAAC,GACxCJ,MAAM,CAAgCG,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC,GAC7DJ,MAAM,CAA2BG,MAAM,CAACD,QAAQ,CAAC,CAAC,CAAC;EAExD,OAAO,IAAIG,cAAc,CACvB;IAIEC,IAAI,EAAE,OAAO;IAEPC,IAAI,WAAAA,KAACC,UAAU,EAAE;MAAA,WAAAC,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,UAAAC,QAAA;QAAA,IAAAC,oBAAA,EAAAC,IAAA,EAAAC,KAAA;QAAA,OAAAL,YAAA,CAAAD,OAAA,CAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAESnB,QAAQ,CAACmB,IAAI,CAAC,CAAC;YAAA;cAAAP,oBAAA,GAAAK,QAAA,CAAAG,IAAA;cAApCP,IAAI,GAAAD,oBAAA,CAAJC,IAAI;cAAEC,KAAK,GAAAF,oBAAA,CAALE,KAAK;cAClB,IAAID,IAAI,EAAE;gBACRP,UAAU,CAACe,KAAK,CAAC,CAAC;cACpB,CAAC,MAAM;gBAGLf,UAAU,CAACgB,OAAO,CAAC,IAAIC,UAAU,CAACT,KAAK,CAAC,CAAC;cAC3C;cAACG,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAO,EAAA,GAAAP,QAAA;cAEDX,UAAU,CAACmB,KAAK,CAAAR,QAAA,CAAAO,EAAM,CAAC;YAAC;YAAA;cAAA,OAAAP,QAAA,CAAAS,IAAA;UAAA;QAAA,GAAAf,OAAA;MAAA;IAE5B,CAAC;IAEKgB,MAAM,WAAAA,OAAA,EAAG;MAAA,WAAApB,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,UAAAkB,SAAA;QAAA,IAAAC,gBAAA;QAAA,OAAApB,YAAA,CAAAD,OAAA,CAAAO,IAAA,UAAAe,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAb,IAAA,GAAAa,SAAA,CAAAZ,IAAA;YAAA;cAAAY,SAAA,CAAAZ,IAAA;cAAA,OACPnB,QAAQ,aAARA,QAAQ,wBAAA6B,gBAAA,GAAR7B,QAAQ,CAAEgC,MAAM,cAAAH,gBAAA,uBAAhBA,gBAAA,CAAAI,IAAA,CAAAjC,QAAmB,CAAC;YAAA;YAAA;cAAA,OAAA+B,SAAA,CAAAL,IAAA;UAAA;QAAA,GAAAE,QAAA;MAAA;IAC5B;EACF,CAAC,EAAAM,aAAA;IAICC,aAAa,EAAAC,IAAA,CAAAC,GAAA,CAAE,CAAC,EAAI,EAAE;EAAA,GACnBtC,OAAO,CAEd,CAAC;AACH"}