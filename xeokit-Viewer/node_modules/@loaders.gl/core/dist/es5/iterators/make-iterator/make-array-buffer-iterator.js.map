{"version":3,"file":"make-array-buffer-iterator.js","names":["DEFAULT_CHUNK_SIZE","makeArrayBufferIterator","arrayBuffer","options","arguments","length","undefined","_regenerator","default","mark","_callee","_options$chunkSize","chunkSize","byteOffset","chunkByteLength","chunk","sourceArray","chunkArray","wrap","_callee$","_context","prev","next","byteLength","Math","min","ArrayBuffer","Uint8Array","set","stop"],"sources":["../../../../src/iterators/make-iterator/make-array-buffer-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(\n  arrayBuffer: ArrayBuffer,\n  options: IteratorOptions = {}\n): Iterable<ArrayBuffer> {\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"],"mappings":";;;;;;;;AAEA,IAAMA,kBAAkB,GAAG,GAAG,GAAG,IAAI;AAQ9B,SAAUC,uBAAuBA,CACtCC,WAAwB;EAAA,IACxBC,OAAwB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,OAAAG,YAAA,CAAAC,OAAA,CAAAC,IAAA,UAAAC,QAAA;IAAA,IAAAC,kBAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,eAAA,EAAAC,KAAA,EAAAC,WAAA,EAAAC,UAAA;IAAA,OAAAV,YAAA,CAAAC,OAAA,CAAAU,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAX,kBAAA,GAEYR,OAAO,CAAzCS,SAAS,EAATA,SAAS,GAAAD,kBAAA,cAAGX,kBAAkB,GAAAW,kBAAA;UAEjCE,UAAU,GAAG,CAAC;QAAA;UAAA,MAEXA,UAAU,GAAGX,WAAW,CAACqB,UAAU;YAAAH,QAAA,CAAAE,IAAA;YAAA;UAAA;UAElCR,eAAe,GAAGU,IAAI,CAACC,GAAG,CAACvB,WAAW,CAACqB,UAAU,GAAGV,UAAU,EAAED,SAAS,CAAC;UAC1EG,KAAK,GAAG,IAAIW,WAAW,CAACZ,eAAe,CAAC;UAGxCE,WAAW,GAAG,IAAIW,UAAU,CAACzB,WAAW,EAAEW,UAAU,EAAEC,eAAe,CAAC;UACtEG,UAAU,GAAG,IAAIU,UAAU,CAACZ,KAAK,CAAC;UACxCE,UAAU,CAACW,GAAG,CAACZ,WAAW,CAAC;UAG3BH,UAAU,IAAIC,eAAe;UAACM,QAAA,CAAAE,IAAA;UAC9B,OAAMP,KAAK;QAAA;UAAAK,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA;UAAA,OAAAF,QAAA,CAAAS,IAAA;MAAA;IAAA,GAAAnB,OAAA;EAAA;AAAA"}