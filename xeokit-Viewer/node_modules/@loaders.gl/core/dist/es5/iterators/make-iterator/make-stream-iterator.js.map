{"version":3,"file":"make-stream-iterator.js","names":["_loaderUtils","require","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","reject","done","resolve","value","then","n","next","prototype","apply","arguments","return","_return","ret","throw","_throw","thr","makeStreamIterator","stream","options","isBrowser","makeBrowserStreamIterator","makeNodeStreamIterator","_x","_x2","_makeBrowserStreamIterator","_wrapAsyncGenerator2","default","_regenerator","mark","_callee","reader","nextBatchPromise","currentBatchPromise","_yield$_awaitAsyncGen","wrap","_callee$","_context","prev","getReader","read","_streamReadAhead","_awaitAsyncGenerator2","sent","abrupt","toArrayBuffer","t0","releaseLock","stop","_x3","_x4","_makeNodeStreamIterator","_callee2","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_callee2$","_context2","finish"],"sources":["../../../../src/iterators/make-iterator/make-stream-iterator.ts"],"sourcesContent":["import type {Readable} from 'stream';\nimport {isBrowser, toArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport type StreamIteratorOptions = {\n  _streamReadAhead?: boolean;\n};\n\n/**\n * Returns an async iterable that reads from a stream (works in both Node.js and browsers)\n * @param stream stream to iterator over\n */\nexport function makeStreamIterator(\n  stream: ReadableStream | Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  return isBrowser\n    ? makeBrowserStreamIterator(stream as ReadableStream, options)\n    : makeNodeStreamIterator(stream as Readable, options);\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @see https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nasync function* makeBrowserStreamIterator(\n  stream: ReadableStream,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // WhatWG: stream is supposed to have a `getIterator` method\n  // if (typeof stream.getIterator === 'function') {\n  //   return stream.getIterator();\n  // }\n  // if (typeof stream[Symbol.asyncIterator] === 'function') {\n  //   return makeToArrayBufferIterator(stream);\n  // }\n\n  // In the browser, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  let nextBatchPromise: Promise<{done?: boolean; value?: Uint8Array}> | undefined;\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const currentBatchPromise = nextBatchPromise || reader.read();\n      // Issue a read for an additional batch, while we await the next batch\n      // Idea is to make fetching happen in parallel with processing / parsing\n      if (options?._streamReadAhead) {\n        nextBatchPromise = reader.read();\n      }\n      // Read from the stream\n      // value is a Uint8Array\n      const {done, value} = await currentBatchPromise;\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield toArrayBuffer(value);\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @note Requires Node.js >= 10\n */\nasync function* makeNodeStreamIterator(\n  stream: Readable,\n  options?: StreamIteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  // NODE 10+: stream is an asyncIterator\n  for await (const chunk of stream) {\n    yield toArrayBuffer(chunk); // Coerce each chunk to ArrayBuffer\n  }\n}\n/* TODO - remove NODE < 10\n * @see https://github.com/bustle/streaming-iterables, MIT license\n *\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return;\n  }\n\n  // TODO - check if is this ever used in Node 10+?\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield toArrayBuffer(data);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState?.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n\nasync function onceReadable(stream: Readable): Promise<any> {\n  return new Promise((resolve) => {\n    stream.once('readable', resolve);\n  });\n}\n  */\n"],"mappings":"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"}