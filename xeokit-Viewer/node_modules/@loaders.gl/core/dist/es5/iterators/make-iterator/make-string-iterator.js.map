{"version":3,"file":"make-string-iterator.js","names":["makeStringIterator","DEFAULT_CHUNK_SIZE","string","options","chunkSize","offset","textEncoder","chunkLength","chunk","_regenerator","default","wrap","makeStringIterator$","_context","prev","next","TextEncoder","length","Math","min","slice","encode","stop","_marked"],"sources":["../../../../src/iterators/make-iterator/make-string-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n"],"mappings":";;;;;;;;wCAUiBA,kBAAkB;AARnC,IAAMC,kBAAkB,GAAG,GAAG,GAAG,IAAI;AAQ9B,SAAUD,kBAAkBA,CACjCE,MAAc,EACdC,OAAyB;EAAA,IAAAC,SAAA,EAAAC,MAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,KAAA;EAAA,OAAAC,YAAA,CAAAC,OAAA,CAAAC,IAAA,UAAAC,oBAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAEnBX,SAAS,GAAG,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,SAAS,KAAIH,kBAAkB;QAEtDI,MAAM,GAAG,CAAC;QACRC,WAAW,GAAG,IAAIU,WAAW,CAAC,CAAC;MAAA;QAAA,MAC9BX,MAAM,GAAGH,MAAM,CAACe,MAAM;UAAAJ,QAAA,CAAAE,IAAA;UAAA;QAAA;QAErBR,WAAW,GAAGW,IAAI,CAACC,GAAG,CAACjB,MAAM,CAACe,MAAM,GAAGZ,MAAM,EAAED,SAAS,CAAC;QACzDI,KAAK,GAAGN,MAAM,CAACkB,KAAK,CAACf,MAAM,EAAEA,MAAM,GAAGE,WAAW,CAAC;QACxDF,MAAM,IAAIE,WAAW;QAACM,QAAA,CAAAE,IAAA;QAGtB,OAAMT,WAAW,CAACe,MAAM,CAACb,KAAK,CAAC;MAAA;QAAAK,QAAA,CAAAE,IAAA;QAAA;MAAA;MAAA;QAAA,OAAAF,QAAA,CAAAS,IAAA;IAAA;EAAA,GAAAC,OAAA;AAAA"}