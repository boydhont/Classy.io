{"version":3,"file":"make-blob-iterator.js","names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","_x","_x2","_makeBlobIterator","apply","arguments","_wrapAsyncGenerator2","default","_regenerator","mark","_callee","blob","options","chunkSize","offset","end","chunk","wrap","_callee$","_context","prev","next","size","_awaitAsyncGenerator2","slice","arrayBuffer","sent","stop"],"sources":["../../../../src/iterators/make-iterator/make-blob-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n"],"mappings":";;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG,IAAI,GAAG,IAAI;AAAC,SAQhBC,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,kBAAA;EAAAA,iBAAA,OAAAG,oBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAhC,SAAAC,QACLC,IAAU,EACVC,OAAyB;IAAA,IAAAC,SAAA,EAAAC,MAAA,EAAAC,GAAA,EAAAC,KAAA;IAAA,OAAAR,YAAA,CAAAD,OAAA,CAAAU,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAEnBR,SAAS,GAAG,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,SAAS,KAAId,kBAAkB;UAEtDe,MAAM,GAAG,CAAC;QAAA;UAAA,MACPA,MAAM,GAAGH,IAAI,CAACW,IAAI;YAAAH,QAAA,CAAAE,IAAA;YAAA;UAAA;UACjBN,GAAG,GAAGD,MAAM,GAAGD,SAAS;UAAAM,QAAA,CAAAE,IAAA;UAAA,WAAAE,qBAAA,CAAAhB,OAAA,EAEVI,IAAI,CAACa,KAAK,CAACV,MAAM,EAAEC,GAAG,CAAC,CAACU,WAAW,CAAC,CAAC;QAAA;UAAnDT,KAAK,GAAAG,QAAA,CAAAO,IAAA;UAEXZ,MAAM,GAAGC,GAAG;UAACI,QAAA,CAAAE,IAAA;UACb,OAAML,KAAK;QAAA;UAAAG,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA;UAAA,OAAAF,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAjB,OAAA;EAAA,CAEd;EAAA,OAAAP,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}