{"version":3,"file":"parse-las.js","names":["_schema","require","_laslazDecoder","_getLasSchema","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","parseLAS","arrayBuffer","options","parseLASMesh","_options$las","undefined","pointIndex","positions","colors","intensities","classifications","originalHeader","lasMesh","loader","loaderData","schema","Schema","header","vertexCount","boundingBox","attributes","topology","mode","parseLASChunked","las","skip","_options$las3","_options$onProgress","decoder","lasHeader","_options$las2","total","totalToRead","PositionsType","fp64","Float64Array","Float32Array","pointsFormatId","Uint8Array","Uint16Array","POSITION","value","size","intensity","classification","COLOR_0","batchSize","pointsCount","_lasHeader$scale","_slicedToArray2","scale","scaleX","scaleY","scaleZ","_lasHeader$offset","offset","offsetX","offsetY","offsetZ","twoByteColor","detectTwoByteColors","colorDepth","_decoder$getPoint","getPoint","position","color","meshBatch","totalRead","progress","onProgress","call","getMeshBoundingBox","getLASSchema","rawData","onParseData","dataHandler","LASFile","open","getHeader","Unpacker","getUnpacker","Math","ceil","max","chunk","readData","count","versionAsString","isCompressed","unpacker","buffer","hasMoreData","e","close","_decoder$getPoint2","console","warn"],"sources":["../../../src/lib/parse-las.ts"],"sourcesContent":["// ported and es6-ified from https://github.com/verma/plasio/\nimport type {ArrowTable, ColumnarTable} from '@loaders.gl/schema';\nimport type {LASLoaderOptions} from '../las-loader';\nimport type {LASMesh, LASHeader} from './las-types';\nimport {Schema, getMeshBoundingBox /* , convertMesh */} from '@loaders.gl/schema';\nimport {LASFile} from './laslaz-decoder';\nimport {getLASSchema} from './get-las-schema';\n\ntype LASChunk = {\n  count: number;\n  buffer: ArrayBuffer;\n  hasMoreData: boolean;\n  versionAsString?: string;\n  isCompressed?: boolean;\n};\n\n/**\n * Parsing of .las file\n * @param arrayBuffer\n * @param options\n * @returns LASHeader\n */\nexport default function parseLAS(\n  arrayBuffer: ArrayBuffer,\n  options?: LASLoaderOptions\n): LASMesh | ArrowTable | ColumnarTable {\n  return parseLASMesh(arrayBuffer, options);\n  // This code breaks pointcloud example on the website\n  // const mesh = parseLASMesh(arrayBuffer, options);\n  // return convertMesh(mesh, options?.las?.shape || 'mesh') as LASMesh | ArrowTable | ColumnarTable;\n}\n\n/**\n * Parsing of .las file\n * @param arrayBuffer\n * @param options\n * @returns LASHeader\n */\nfunction parseLASMesh(arrayBuffer: ArrayBuffer, options: LASLoaderOptions = {}): LASMesh {\n  let pointIndex: number = 0;\n\n  let positions: Float32Array | Float64Array;\n  let colors: Uint8Array | null;\n  let intensities: Uint16Array;\n  let classifications: Uint8Array;\n  let originalHeader: any;\n\n  const lasMesh: LASMesh = {\n    loader: 'las',\n    loaderData: {} as LASHeader,\n    // shape: 'mesh',\n    schema: new Schema([]),\n    header: {\n      vertexCount: 0,\n      boundingBox: [\n        [0, 0, 0],\n        [0, 0, 0]\n      ]\n    },\n    attributes: {},\n    topology: 'point-list',\n    mode: 0 // GL.POINTS\n  };\n\n  /* eslint-disable max-statements */\n  // @ts-ignore Possibly undefined\n  parseLASChunked(arrayBuffer, options.las?.skip, (decoder: any = {}, lasHeader: LASHeader) => {\n    if (!originalHeader) {\n      originalHeader = lasHeader;\n      const total = lasHeader.totalToRead;\n\n      const PositionsType = options.las?.fp64 ? Float64Array : Float32Array;\n      positions = new PositionsType(total * 3);\n      // laslaz-decoder.js `pointFormatReaders`\n      colors = lasHeader.pointsFormatId >= 2 ? new Uint8Array(total * 4) : null;\n      intensities = new Uint16Array(total);\n      classifications = new Uint8Array(total);\n\n      lasMesh.loaderData = lasHeader;\n      lasMesh.attributes = {\n        POSITION: {value: positions, size: 3},\n        // non-gltf attributes, use non-capitalized names for now\n        intensity: {value: intensities, size: 1},\n        classification: {value: classifications, size: 1}\n      };\n\n      if (colors) {\n        lasMesh.attributes.COLOR_0 = {value: colors, size: 4};\n      }\n    }\n\n    const batchSize = decoder.pointsCount;\n    const {\n      scale: [scaleX, scaleY, scaleZ],\n      offset: [offsetX, offsetY, offsetZ]\n    } = lasHeader;\n\n    const twoByteColor = detectTwoByteColors(decoder, batchSize, options.las?.colorDepth);\n\n    for (let i = 0; i < batchSize; i++) {\n      const {position, color, intensity, classification} = decoder.getPoint(i);\n\n      positions[pointIndex * 3] = position[0] * scaleX + offsetX;\n      positions[pointIndex * 3 + 1] = position[1] * scaleY + offsetY;\n      positions[pointIndex * 3 + 2] = position[2] * scaleZ + offsetZ;\n\n      if (color && colors) {\n        if (twoByteColor) {\n          colors[pointIndex * 4] = color[0] / 256;\n          colors[pointIndex * 4 + 1] = color[1] / 256;\n          colors[pointIndex * 4 + 2] = color[2] / 256;\n        } else {\n          colors[pointIndex * 4] = color[0];\n          colors[pointIndex * 4 + 1] = color[1];\n          colors[pointIndex * 4 + 2] = color[2];\n        }\n        colors[pointIndex * 4 + 3] = 255;\n      }\n\n      intensities[pointIndex] = intensity;\n      classifications[pointIndex] = classification;\n\n      pointIndex++;\n    }\n\n    const meshBatch = {\n      ...lasMesh,\n      header: {\n        vertexCount: lasHeader.totalRead\n      },\n      progress: lasHeader.totalRead / lasHeader.totalToRead\n    };\n\n    options?.onProgress?.(meshBatch);\n  });\n  /* eslint-enable max-statements */\n\n  lasMesh.header = {\n    vertexCount: originalHeader.totalToRead,\n    boundingBox: getMeshBoundingBox(lasMesh?.attributes || {})\n  };\n\n  if (lasMesh) {\n    lasMesh.schema = getLASSchema(lasMesh.loaderData, lasMesh.attributes);\n  }\n  return lasMesh;\n}\n\n/**\n * parse laz data\n * @param rawData\n * @param skip\n * @param onParseData\n * @return parsed point cloud\n */\n/* eslint-enable max-statements */\nexport function parseLASChunked(rawData: ArrayBuffer, skip: number, onParseData: any = {}): void {\n  const dataHandler = new LASFile(rawData);\n\n  try {\n    // open data\n    dataHandler.open();\n\n    const header = dataHandler.getHeader();\n    // start loading\n    const Unpacker = dataHandler.getUnpacker();\n\n    const totalToRead = Math.ceil(header.pointsCount / Math.max(1, skip));\n    header.totalToRead = totalToRead;\n    let totalRead = 0;\n\n    /* eslint-disable no-constant-condition */\n    while (true) {\n      const chunk: LASChunk = dataHandler.readData(1000 * 100, 0, skip);\n\n      totalRead += chunk.count;\n\n      header.totalRead = totalRead;\n      header.versionAsString = chunk.versionAsString;\n      header.isCompressed = chunk.isCompressed;\n\n      const unpacker = new Unpacker(chunk.buffer, chunk.count, header);\n\n      // surface unpacker and progress via call back\n      // use unpacker.pointsCount and unpacker.getPoint(i) to handle data in app\n      onParseData(unpacker, header);\n\n      if (!chunk.hasMoreData || totalRead >= totalToRead) {\n        break;\n      }\n    }\n  } catch (e) {\n    throw e;\n  } finally {\n    dataHandler.close();\n  }\n}\n\n/**\n * @param decoder\n * @param batchSize\n * @param colorDepth\n * @returns boolean\n */\nfunction detectTwoByteColors(\n  decoder: any = {},\n  batchSize: number,\n  colorDepth?: number | string\n): boolean {\n  let twoByteColor = false;\n  switch (colorDepth) {\n    case 8:\n      twoByteColor = false;\n      break;\n    case 16:\n      twoByteColor = true;\n      break;\n    case 'auto':\n      if (decoder.getPoint(0).color) {\n        for (let i = 0; i < batchSize; i++) {\n          const {color} = decoder.getPoint(i);\n          // eslint-disable-next-line max-depth\n          if (color[0] > 255 || color[1] > 255 || color[2] > 255) {\n            twoByteColor = true;\n          }\n        }\n      }\n      break;\n    default:\n      // eslint-disable-next-line\n      console.warn('las: illegal value for options.las.colorDepth');\n      break;\n  }\n  return twoByteColor;\n}\n"],"mappings":"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"}