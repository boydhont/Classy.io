{"version":3,"file":"laslaz-decoder.js","names":["getModule","Module","POINT_FORMAT_READERS","dv","position","getInt32","intensity","getUint16","classification","getUint8","color","readAs","buf","Type","arguments","length","undefined","offset","count","sub","slice","BYTES_PER_ELEMENT","r","ret","i","push","parseLASHeader","arraybuffer","start","o","pointsOffset","Uint32Array","pointsFormatId","Uint8Array","pointsStructSize","Uint16Array","pointsCount","scale","Float64Array","bounds","maxs","mins","LASLoader","constructor","_defineProperty","totalToRead","totalRead","versionAsString","isCompressed","open","getHeader","header","readData","skip","Error","readOffset","Math","min","end","buffer","hasMoreData","pointsToRead","bufferSize","ceil","pointsRead","src","set","close","LAZLoader","instance","LASZip","abInt","_malloc","byteLength","HEAPU8","error","concat","message","thisBuf","bufRead","getPoint","a","delete","LASDecoder","len","arrayb","decoder","pointSize","index","DataView","LASFile","determineVersion","determineFormat","formatId","loader","bit7","bit6","ver","Int8Array","version","isOpen","getUnpacker","LASModuleWasLoaded"],"sources":["../../../src/lib/laslaz-decoder.ts"],"sourcesContent":["/*\n  Modified from Uday Verma and Howard Butler's plasio\n  https://github.com/verma/plasio/\n  MIT License\n*/\n// laslaz.js - treat as compiled code\nimport type {LASHeader} from './las-types';\nimport getModule from './libs/laz-perf';\n\nlet Module: any = null;\n\ntype LASReader = (dv: DataView) => {\n  [LASAttribute: string]: number | number[];\n};\n\ntype LASReaders = {\n  [key: number]: LASReader;\n};\n\ntype LASData = {\n  buffer: ArrayBuffer;\n  count: number;\n  hasMoreData: boolean;\n};\n\nconst POINT_FORMAT_READERS: LASReaders = {\n  0: (dv) => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15)\n    };\n  },\n  1: (dv) => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15)\n    };\n  },\n  2: (dv) => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15),\n      color: [dv.getUint16(20, true), dv.getUint16(22, true), dv.getUint16(24, true)]\n    };\n  },\n  3: (dv) => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15),\n      color: [dv.getUint16(28, true), dv.getUint16(30, true), dv.getUint16(32, true)]\n    };\n  }\n};\n\n/**\n * Reads incoming binary data depends on the Type parameter\n * @param buf\n * @param Type\n * @param offset\n * @param count\n * @returns number | number[] from incoming binary data\n */\nfunction readAs(buf: ArrayBuffer, Type: any = {}, offset: number, count?: number) {\n  count = count === undefined || count === 0 ? 1 : count;\n  const sub = buf.slice(offset, offset + Type.BYTES_PER_ELEMENT * count);\n\n  const r = new Type(sub);\n  if (count === 1) {\n    return r[0];\n  }\n\n  const ret: number[] = [];\n  for (let i = 0; i < count; i++) {\n    ret.push(r[i]);\n  }\n\n  return ret;\n}\n\n/**\n * Parsing of header's attributes\n * @param arraybuffer\n * @returns header as LASHeader\n */\nfunction parseLASHeader(arraybuffer: ArrayBuffer): LASHeader {\n  let start = 32 * 3 + 35;\n\n  const o: Partial<LASHeader> = {\n    pointsOffset: readAs(arraybuffer, Uint32Array, 32 * 3),\n    pointsFormatId: readAs(arraybuffer, Uint8Array, 32 * 3 + 8),\n    pointsStructSize: readAs(arraybuffer, Uint16Array, 32 * 3 + 8 + 1),\n    pointsCount: readAs(arraybuffer, Uint32Array, 32 * 3 + 11),\n    scale: readAs(arraybuffer, Float64Array, start, 3)\n  };\n  start += 24; // 8*3\n  o.offset = readAs(arraybuffer, Float64Array, start, 3);\n  start += 24;\n\n  const bounds = readAs(arraybuffer, Float64Array, start, 6);\n  start += 48; // 8*6;\n  o.maxs = [bounds[0], bounds[2], bounds[4]];\n  o.mins = [bounds[1], bounds[3], bounds[5]];\n\n  return o as LASHeader;\n}\n\n// LAS Loader\n// Loads uncompressed files\n//\nclass LASLoader {\n  arraybuffer: ArrayBuffer;\n  readOffset: number = 0;\n  header: LASHeader = {\n    pointsOffset: 0,\n    pointsFormatId: 0,\n    pointsStructSize: 0,\n    pointsCount: 0,\n    scale: [0, 0, 0],\n    offset: [0, 0, 0],\n    maxs: [0],\n    mins: [0],\n    totalToRead: 0,\n    totalRead: 0,\n    versionAsString: '',\n    isCompressed: true\n  };\n\n  constructor(arraybuffer: ArrayBuffer) {\n    this.arraybuffer = arraybuffer;\n  }\n\n  /**\n   * @returns boolean\n   */\n  open() {\n    // Nothing needs to be done to open this\n    return true;\n  }\n  /**\n   * Parsing of incoming binary\n   * @returns LASHeader\n   */\n  getHeader() {\n    this.header = parseLASHeader(this.arraybuffer);\n    return this.header;\n  }\n\n  /**\n   * Reading data\n   * @param count\n   * @param skip\n   * @returns new ArrayBuffer, count, hasMoreData\n   */\n  readData(count: number, skip: number) {\n    const {header, arraybuffer} = this;\n    if (!header) {\n      throw new Error('Cannot start reading data till a header request is issued');\n    }\n\n    let {readOffset} = this;\n    let start: number;\n\n    if (skip <= 1) {\n      count = Math.min(count, header.pointsCount - readOffset);\n      start = header.pointsOffset + readOffset * header.pointsStructSize;\n      const end = start + count * header.pointsStructSize;\n      readOffset += count;\n      this.readOffset = readOffset;\n      return {\n        buffer: arraybuffer.slice(start, end),\n        count,\n        hasMoreData: readOffset < header.pointsCount\n      };\n    }\n\n    const pointsToRead = Math.min(count * skip, header.pointsCount - readOffset);\n    const bufferSize = Math.ceil(pointsToRead / skip);\n    let pointsRead = 0;\n\n    const buf = new Uint8Array(bufferSize * header.pointsStructSize);\n    for (let i = 0; i < pointsToRead; i++) {\n      if (i % skip === 0) {\n        start = header.pointsOffset + readOffset * header.pointsStructSize;\n        const src = new Uint8Array(arraybuffer, start, header.pointsStructSize);\n\n        buf.set(src, pointsRead * header.pointsStructSize);\n        pointsRead++;\n      }\n\n      readOffset++;\n    }\n    this.readOffset = readOffset;\n\n    return {\n      buffer: buf.buffer,\n      count: pointsRead,\n      hasMoreData: readOffset < header.pointsCount\n    };\n  }\n  /**\n   * Method which brings data to null to close the file\n   * @returns\n   */\n  close() {\n    // @ts-ignore Possibly null\n    this.arraybuffer = null;\n    return true;\n  }\n}\n\n/**\n * LAZ Loader\n * Uses NaCL module to load LAZ files\n */\nclass LAZLoader {\n  arraybuffer: ArrayBuffer;\n  instance: any = null; // LASZip instance\n  header: LASHeader | null = null;\n\n  constructor(arraybuffer: ArrayBuffer) {\n    this.arraybuffer = arraybuffer;\n\n    if (!Module) {\n      // Avoid executing laz-perf on import\n      Module = getModule();\n    }\n  }\n\n  /**\n   * Opens the file\n   * @returns boolean\n   */\n  open(): boolean {\n    try {\n      const {arraybuffer} = this;\n      this.instance = new Module.LASZip();\n      const abInt = new Uint8Array(arraybuffer);\n      const buf = Module._malloc(arraybuffer.byteLength);\n\n      this.instance.arraybuffer = arraybuffer;\n      this.instance.buf = buf;\n      Module.HEAPU8.set(abInt, buf);\n      this.instance.open(buf, arraybuffer.byteLength);\n\n      this.instance.readOffset = 0;\n\n      return true;\n    } catch (error) {\n      throw new Error(`Failed to open file: ${(error as Error).message}`);\n    }\n  }\n\n  getHeader(): LASHeader {\n    if (!this.instance) {\n      throw new Error('You need to open the file before trying to read header');\n    }\n\n    try {\n      const header = parseLASHeader(this.instance.arraybuffer);\n      header.pointsFormatId &= 0x3f;\n      this.header = header;\n      return header;\n    } catch (error) {\n      throw new Error(`Failed to get header: ${(error as Error).message}`);\n    }\n  }\n  /**\n   * @param count\n   * @param offset\n   * @param skip\n   * @returns Data\n   */\n  readData(count: number, offset: number, skip: number): LASData {\n    if (!this.instance) {\n      throw new Error('You need to open the file before trying to read stuff');\n    }\n\n    const {header, instance} = this;\n\n    if (!header) {\n      throw new Error(\n        'You need to query header before reading, I maintain state that way, sorry :('\n      );\n    }\n\n    try {\n      const pointsToRead = Math.min(count * skip, header.pointsCount - instance.readOffset);\n      const bufferSize = Math.ceil(pointsToRead / skip);\n      let pointsRead = 0;\n\n      const thisBuf = new Uint8Array(bufferSize * header.pointsStructSize);\n      const bufRead = Module._malloc(header.pointsStructSize);\n      for (let i = 0; i < pointsToRead; i++) {\n        instance.getPoint(bufRead);\n\n        if (i % skip === 0) {\n          const a = new Uint8Array(Module.HEAPU8.buffer, bufRead, header.pointsStructSize);\n          thisBuf.set(a, pointsRead * header.pointsStructSize);\n          pointsRead++;\n        }\n\n        instance.readOffset++;\n      }\n\n      return {\n        buffer: thisBuf.buffer,\n        count: pointsRead,\n        hasMoreData: instance.readOffset < header.pointsCount\n      };\n    } catch (error) {\n      throw new Error(`Failed to read data: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Deletes the instance\n   * @returns boolean\n   */\n  close(): boolean {\n    try {\n      if (this.instance !== null) {\n        this.instance.delete();\n        this.instance = null;\n      }\n      return true;\n    } catch (error) {\n      throw new Error(`Failed to close file: ${(error as Error).message}`);\n    }\n  }\n}\n\n/**\n * Helper class: Decodes LAS records into points\n */\nclass LASDecoder {\n  arrayb: ArrayBuffer;\n  decoder: (dv: DataView) => {};\n  pointsCount: number;\n  pointSize: number;\n  scale: [number, number, number];\n  offset?: [number, number, number];\n  mins?: number[];\n  maxs?: number[];\n\n  constructor(buffer: ArrayBuffer, len: number, header: LASHeader) {\n    this.arrayb = buffer;\n    this.decoder = POINT_FORMAT_READERS[header.pointsFormatId];\n    this.pointsCount = len;\n    this.pointSize = header.pointsStructSize;\n    this.scale = header.scale;\n    this.offset = header.offset;\n    this.mins = header.mins;\n    this.maxs = header.maxs;\n  }\n\n  /**\n   * Decodes data depends on this point size\n   * @param index\n   * @returns New object\n   */\n  getPoint(index: number): {} {\n    if (index < 0 || index >= this.pointsCount) {\n      throw new Error('Point index out of range');\n    }\n\n    const dv = new DataView(this.arrayb, index * this.pointSize, this.pointSize);\n    return this.decoder(dv);\n  }\n}\n\n/**\n * A single consistent interface for loading LAS/LAZ files\n */\nexport class LASFile {\n  arraybuffer: ArrayBuffer;\n  formatId: number = 0;\n  loader: LASLoader | LAZLoader;\n  isCompressed: boolean = true;\n  isOpen: boolean = false;\n  version: number = 0;\n  versionAsString: string = '';\n\n  constructor(arraybuffer: ArrayBuffer) {\n    this.arraybuffer = arraybuffer;\n\n    if (this.determineVersion() > 13) {\n      throw new Error('Only file versions <= 1.3 are supported at this time');\n    }\n\n    this.determineFormat();\n    if (POINT_FORMAT_READERS[this.formatId] === undefined) {\n      throw new Error('The point format ID is not supported');\n    }\n\n    this.loader = this.isCompressed\n      ? new LAZLoader(this.arraybuffer)\n      : new LASLoader(this.arraybuffer);\n  }\n\n  /**\n   * Determines format in parameters of LASHeaer\n   */\n  determineFormat(): void {\n    const formatId = readAs(this.arraybuffer, Uint8Array, 32 * 3 + 8);\n    const bit7 = (formatId & 0x80) >> 7;\n    const bit6 = (formatId & 0x40) >> 6;\n\n    if (bit7 === 1 && bit6 === 1) {\n      throw new Error('Old style compression not supported');\n    }\n\n    this.formatId = formatId & 0x3f;\n    this.isCompressed = bit7 === 1 || bit6 === 1;\n  }\n\n  /**\n   * Determines version\n   * @returns version\n   */\n  determineVersion(): number {\n    const ver = new Int8Array(this.arraybuffer, 24, 2);\n    this.version = ver[0] * 10 + ver[1];\n    this.versionAsString = `${ver[0]}.${ver[1]}`;\n    return this.version;\n  }\n\n  /**\n   * Reads if the file is open\n   * @returns boolean\n   */\n  open(): void {\n    if (this.loader.open()) {\n      this.isOpen = true;\n    }\n  }\n  /**\n   * Gets the header\n   * @returns Header\n   */\n  getHeader(): LASHeader {\n    return this.loader.getHeader();\n  }\n\n  /**\n   * @param count\n   * @param start\n   * @param skip\n   * @returns Data\n   */\n  readData(count: number, start: number, skip: number): LASData {\n    return this.loader.readData(count, start, skip);\n  }\n\n  /**\n   * Closes the file\n   */\n  close(): void {\n    if (this.loader.close()) {\n      this.isOpen = false;\n    }\n  }\n  /**\n   */\n  getUnpacker(): typeof LASDecoder {\n    return LASDecoder;\n  }\n}\n\nexport const LASModuleWasLoaded = false;\n\n/* eslint no-use-before-define: 2 */\n"],"mappings":"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"}