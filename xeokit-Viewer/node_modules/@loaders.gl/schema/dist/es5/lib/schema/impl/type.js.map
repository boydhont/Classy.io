{"version":3,"file":"type.js","names":["_enum","require","_Symbol$toStringTag3","_Symbol$toStringTag4","_Symbol$toStringTag7","_Symbol$toStringTag8","_Symbol$toStringTag9","_Symbol$toStringTag10","_Symbol$toStringTag11","_Symbol$toStringTag12","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","DataType","_classCallCheck2","_createClass2","key","get","Type","NONE","value","compareTo","other","isNull","x","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","Map","isDictionary","Dictionary","exports","_DataType","_Symbol$toStringTag","_inherits2","_super","toString","Symbol","toStringTag","_DataType2","_Symbol$toStringTag2","_super2","_DataType3","_super3","isSigned","bitWidth","_this","_defineProperty2","_assertThisInitialized2","concat","Int8","_Int","_super4","Int16","_Int2","_super5","Int32","_Int3","_super6","Int64","_Int4","_super7","Uint8","_Int5","_super8","Uint16","_Int6","_super9","Uint32","_Int7","_super10","Uint64","_Int8","_super11","Precision","HALF","SINGLE","DOUBLE","_DataType4","_super12","precision","_this2","Float16","_Float","_super13","Float32","_Float2","_super14","Float64","_Float3","_super15","_DataType5","_Symbol$toStringTag5","_super16","_DataType6","_Symbol$toStringTag6","_super17","DateUnit","DAY","MILLISECOND","_DataType7","_super18","unit","_this3","DateDay","_Date","_super19","DateMillisecond","_Date2","_super20","TimeUnit","SECOND","MICROSECOND","NANOSECOND","_DataType8","_super21","_this4","TimeSecond","_Time","_super22","TimeMillisecond","_Time2","_super23","_DataType9","_super24","_this5","timezone","length","undefined","TimestampSecond","_Timestamp","_super25","TimestampMillisecond","_Timestamp2","_super26","TimestampMicrosecond","_Timestamp3","_super27","TimestampNanosecond","_Timestamp4","_super28","IntervalUnit","DAY_TIME","YEAR_MONTH","_DataType10","_super29","_this6","IntervalDayTime","_Interval","_super30","IntervalYearMonth","_Interval2","_super31","_DataType11","_super32","listSize","child","_this7","children","type","valueType","_DataType12","_super33","_this8","map","f","name","join"],"sources":["../../../../../src/lib/schema/impl/type.ts"],"sourcesContent":["// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: any;\n  readonly bitWidth: number;\n\n  constructor(unit: any, bitWidth: number) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n\nexport class Struct extends DataType {\n  public readonly children: Field[];\n\n  constructor(children: Field[]) {\n    super();\n    this.children = children;\n  }\n\n  public get typeId() {\n    return Type.Struct;\n  }\n  public toString() {\n    return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(', ')}}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Struct';\n  }\n}\n"],"mappings":"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"}