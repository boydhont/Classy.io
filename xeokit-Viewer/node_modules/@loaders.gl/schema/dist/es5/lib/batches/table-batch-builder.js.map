{"version":3,"file":"table-batch-builder.js","names":["_baseTableBatchAggregator","_interopRequireDefault","require","_rowTableBatchAggregator","_columnarTableBatchAggregator","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","DEFAULT_OPTIONS","shape","batchSize","batchDebounceMs","limit","_limitMB","ERR_MESSAGE","TableBatchBuilder","schema","options","_classCallCheck2","Date","now","_createClass2","value","limitReached","_this$options","_this$options2","Boolean","totalLength","totalBytes","addRow","row","rowBytes","_estimateRowMB","Array","isArray","addArrayRow","addObjectRow","aggregator","TableBatchType","_getTableBatchType","chunkComplete","chunk","ArrayBuffer","bytesUsed","byteLength","isChunkComplete","getFullBatch","_isFull","_getBatch","getFinalBatch","rowCount","lastBatchEmittedMs","normalizedBatch","getBatch","count","batchCount","assign","BaseTableBatchAggregator","RowTableBatchAggregator","ColumnarTableBatchAggregator","ArrowBatch","Error","exports"],"sources":["../../../../src/lib/batches/table-batch-builder.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport type {TableBatchAggregator, TableBatchConstructor} from './table-batch-aggregator';\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\n\n// TODO define interface instead\ntype TableBatchBuilderOptions = {\n  shape: 'row-table' | 'array-row-table' | 'object-row-table' | 'columnar-table' | 'arrow-table';\n  batchSize?: number | 'auto';\n  batchDebounceMs?: number;\n  limit: number;\n  _limitMB: number;\n};\n\ntype GetBatchOptions = {\n  bytesUsed?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_OPTIONS: Required<TableBatchBuilderOptions> = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\n\nconst ERR_MESSAGE = 'TableBatchBuilder';\n\n/** Incrementally builds batches from a stream of rows */\nexport default class TableBatchBuilder {\n  schema: Schema;\n  options: Required<TableBatchBuilderOptions>;\n\n  private aggregator: TableBatchAggregator | null = null;\n  private batchCount: number = 0;\n  private bytesUsed: number = 0;\n  private isChunkComplete: boolean = false;\n  private lastBatchEmittedMs: number = Date.now();\n  private totalLength: number = 0;\n  private totalBytes: number = 0;\n  private rowBytes: number = 0;\n\n  static ArrowBatch?: TableBatchConstructor;\n\n  constructor(schema: Schema, options?: TableBatchBuilderOptions) {\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  limitReached(): boolean {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row: any[] | {[columnName: string]: any}): void {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n\n  /** Add one row to the batch */\n  protected addArrayRow(row: any[]) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n\n  /** Add one row to the batch */\n  protected addObjectRow(row: {[columnName: string]: any}): void {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk: ArrayBuffer | string): void {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n\n  getFullBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n\n  getFinalBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._getBatch(options);\n  }\n\n  // INTERNAL\n\n  _estimateRowMB(row: any[] | object): number {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n\n  private _isFull(): boolean {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  private _getBatch(options?: GetBatchOptions): TableBatch | null {\n    if (!this.aggregator) {\n      return null;\n    }\n\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch() as TableBatch;\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n\n  private _getTableBatchType(): TableBatchConstructor {\n    switch (this.options.shape) {\n      case 'row-table':\n        return BaseTableBatchAggregator;\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        throw new Error(ERR_MESSAGE);\n    }\n  }\n}\n"],"mappings":"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"}