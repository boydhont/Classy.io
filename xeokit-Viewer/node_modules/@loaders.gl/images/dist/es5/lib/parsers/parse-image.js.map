{"version":3,"file":"parse-image.js","names":["_loaderUtils","require","_imageType","_parsedImageApi","_parseToImage","_parseToImageBitmap","_parseToNodeImage","parseImage","_x","_x2","_x3","_parseImage","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","arrayBuffer","options","context","imageOptions","imageType","_ref","url","loadType","image","wrap","_callee$","_context","prev","next","type","getLoadableImageType","t0","parseToImageBitmap","sent","abrupt","parseToImage","parseToNodeImage","assert","getImageData","stop","getDefaultImageType","isImageTypeSupported"],"sources":["../../../../src/lib/parsers/parse-image.ts"],"sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '../../types';\nimport type {ImageLoaderOptions} from '../../image-loader';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport {parseToImage} from './parse-to-image';\nimport {parseToImageBitmap} from './parse-to-image-bitmap';\nimport {parseToNodeImage} from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport async function parseImage(\n  arrayBuffer: ArrayBuffer,\n  options?: ImageLoaderOptions,\n  context?: LoaderContext\n): Promise<ImageType> {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"],"mappings":";;;;;;;;;AACA,IAAAA,YAAA,GAAAC,OAAA;AAGA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AACA,IAAAI,mBAAA,GAAAJ,OAAA;AACA,IAAAK,iBAAA,GAAAL,OAAA;AAAuD,SAIjCM,UAAUA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,YAAA;EAAAA,WAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAzB,SAAAC,QACLC,WAAwB,EACxBC,OAA4B,EAC5BC,OAAuB;IAAA,IAAAC,YAAA,EAAAC,SAAA,EAAAC,IAAA,EAAAC,GAAA,EAAAC,QAAA,EAAAC,KAAA;IAAA,OAAAX,YAAA,CAAAD,OAAA,CAAAa,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAEvBZ,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;UACjBE,YAAY,GAAGF,OAAO,CAACO,KAAK,IAAI,CAAC,CAAC;UAGlCJ,SAAS,GAAGD,YAAY,CAACW,IAAI,IAAI,MAAM;UAAAT,IAAA,GAE/BH,OAAO,IAAI,CAAC,CAAC,EAApBI,GAAG,GAAAD,IAAA,CAAHC,GAAG;UAGJC,QAAQ,GAAGQ,oBAAoB,CAACX,SAAS,CAAC;UAAAO,QAAA,CAAAK,EAAA,GAGxCT,QAAQ;UAAAI,QAAA,CAAAE,IAAA,GAAAF,QAAA,CAAAK,EAAA,KACT,aAAa,OAAAL,QAAA,CAAAK,EAAA,KAGb,OAAO,QAAAL,QAAA,CAAAK,EAAA,KAGP,MAAM;UAAA;QAAA;UAAAL,QAAA,CAAAE,IAAA;UAAA,OALK,IAAAI,sCAAkB,EAACjB,WAAW,EAAEC,OAAO,EAAEK,GAAG,CAAC;QAAA;UAA3DE,KAAK,GAAAG,QAAA,CAAAO,IAAA;UAAA,OAAAP,QAAA,CAAAQ,MAAA;QAAA;UAAAR,QAAA,CAAAE,IAAA;UAAA,OAGS,IAAAO,0BAAY,EAACpB,WAAW,EAAEC,OAAO,EAAEK,GAAG,CAAC;QAAA;UAArDE,KAAK,GAAAG,QAAA,CAAAO,IAAA;UAAA,OAAAP,QAAA,CAAAQ,MAAA;QAAA;UAAAR,QAAA,CAAAE,IAAA;UAAA,OAIS,IAAAQ,kCAAgB,EAACrB,WAAW,EAAEC,OAAO,CAAC;QAAA;UAApDO,KAAK,GAAAG,QAAA,CAAAO,IAAA;UAAA,OAAAP,QAAA,CAAAQ,MAAA;QAAA;UAGL,IAAAG,mBAAM,EAAC,KAAK,CAAC;QAAC;UAIlB,IAAIlB,SAAS,KAAK,MAAM,EAAE;YACxBI,KAAK,GAAG,IAAAe,4BAAY,EAACf,KAAK,CAAC;UAC7B;UAAC,OAAAG,QAAA,CAAAQ,MAAA,WAEMX,KAAK;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAa,IAAA;MAAA;IAAA,GAAAzB,OAAA;EAAA,CACb;EAAA,OAAAP,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,SAASqB,oBAAoBA,CAACD,IAAI,EAAE;EAClC,QAAQA,IAAI;IACV,KAAK,MAAM;IACX,KAAK,MAAM;MAGT,OAAO,IAAAW,8BAAmB,EAAC,CAAC;IAC9B;MAEE,IAAAC,+BAAoB,EAACZ,IAAI,CAAC;MAC1B,OAAOA,IAAI;EACf;AACF"}