{"version":3,"file":"encode-image.js","names":["_parsedImageApi","require","_encodeImageNode","globalThis","encodeImage","_x","_x2","_encodeImage","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","image","options","wrap","_callee$","_context2","prev","next","abrupt","type","mimeType","encodeImageInBrowser","stop","qualityParamSupported","_x3","_x4","_encodeImageInBrowser","_callee2","_options$image","jpegQuality","_getImageSize","width","height","canvas","blob","_callee2$","_context3","getImageSize","document","createElement","drawImageToCanvas","Promise","resolve","toBlob","error","sent","Error","arrayBuffer","x","length","undefined","y","ImageBitmap","context","getContext","transferFromImageBitmap","data","clampedArray","Uint8ClampedArray","imageData","ImageData","putImageData","drawImage"],"sources":["../../../../src/lib/encoders/encode-image.ts"],"sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"],"mappings":"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"}