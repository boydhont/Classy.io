{"version":3,"file":"worker-farm.js","names":["_workerPool","_interopRequireDefault","require","_workerThread","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","WorkerFarm","props","_classCallCheck2","Map","setProps","workerPools","_createClass2","destroy","_iterator","values","_step","workerPool","_iterator2","_step2","_getWorkerPoolProps","getWorkerPool","options","url","get","WorkerPool","set","isSupported","WorkerThread","getWorkerFarm","undefined","_workerFarm","exports"],"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency - max count of workers\n * @param maxMobileConcurrency - max count of workers on mobile\n * @param maxConcurrency - max count of workers\n * @param reuseWorkers - if false, destroys workers when task is completed\n * @param onDebug - callback intended to allow application to log worker pool activity\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: Required<WorkerFarmProps> = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map<string, WorkerPool>();\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"],"mappings":"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"}