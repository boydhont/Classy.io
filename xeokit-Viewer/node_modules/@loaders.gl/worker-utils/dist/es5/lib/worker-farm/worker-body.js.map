{"version":3,"file":"worker-body.js","names":["_getTransferList","require","getParentPort","parentPort","eval","globalThis","_unused","onMessageWrapperMap","Map","WorkerBody","_classCallCheck2","default","_createClass2","key","value","inWorkerThread","self","Boolean","set","onMessage","handleMessage","message","_ref","data","type","payload","on","console","debug","onmessage","addEventListener","onMessageWrapper","get","isKnownMessage","_ref2","error","removeEventListener","delete","postMessage","source","transferList","getTransferList","exports","startsWith"],"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nfunction getParentPort() {\n  // const isNode = globalThis.process;\n  let parentPort;\n  try {\n    // prettier-ignore\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    parentPort = globalThis.parentPort;\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static inWorkerThread(): boolean {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    function handleMessage(message) {\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const parentPort = getParentPort();\n      const {type, payload} = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      // if (message == 'exit') { parentPort.unref(); }\n      // eslint-disable-next-line\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const parentPort = getParentPort();\n        const {type, payload} = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n    // console.log('posting message', data);\n    const transferList = getTransferList(payload);\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-ignore\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"mappings":"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"}