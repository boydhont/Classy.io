{"version":3,"file":"worker-pool.js","names":["_globals","require","_workerThread","_interopRequireDefault","_workerJob","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","WorkerPool","props","_classCallCheck2","url","setProps","_createClass2","value","destroy","idleQueue","worker","isDestroyed","name","undefined","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","_startJob","_asyncToGenerator2","_regenerator","mark","_callee","_this","onMessage","onError","startPromise","_args","wrap","_callee$","_context","prev","next","job","type","data","done","error","Promise","onStart","jobQueue","_startQueuedJob","abrupt","sent","stop","startJob","_x","_startQueuedJob2","_callee2","workerThread","queuedJob","_job","_callee2$","_context2","_getAvailableWorker","shift","message","backlog","WorkerJob","payload","result","returnWorkerToQueue","finish","shouldDestroyWorker","count","_getMaxConcurrency","concat","toLowerCase","WorkerThread","isMobile","isSupported","exports"],"sources":["../../../../src/lib/worker-farm/worker-pool.ts"],"sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {isMobile} from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\n/** WorkerPool onDebug Callback Parameters */\ntype OnDebugParameters = {\n  message: string;\n  worker: string;\n  name: string;\n  job: string;\n  backlog: number;\n  workerThread: WorkerThread;\n};\n\n/** WorkerPool Properties */\nexport type WorkerPoolProps = {\n  name?: string;\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  onDebug?: (options: OnDebugParameters) => any;\n  reuseWorkers?: boolean;\n};\n\n/** Private helper types */\ntype OnMessage = (job: WorkerJob, type: WorkerMessageType, payload: WorkerMessagePayload) => void;\ntype OnError = (job: WorkerJob, error: Error) => void;\n\ntype QueuedJob = {\n  name: string;\n  onMessage: OnMessage;\n  onError: OnError;\n  onStart: (value: any) => void; // Resolve job start promise\n};\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  name: string = 'unnamed';\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency: number = 1;\n  maxMobileConcurrency: number = 1;\n  onDebug: (options: OnDebugParameters) => any = () => {};\n  reuseWorkers: boolean = true;\n\n  private props: WorkerPoolProps = {};\n  private jobQueue: QueuedJob[] = [];\n  private idleQueue: WorkerThread[] = [];\n  private count = 0;\n  private isDestroyed = false;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /**\n   * @param processor - worker function\n   * @param maxConcurrency - max count of workers\n   */\n  constructor(props: WorkerPoolProps) {\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach((worker) => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  setProps(props: WorkerPoolProps) {\n    this.props = {...this.props, ...props};\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  async startJob(\n    name: string,\n    onMessage: OnMessage = (job, type, data) => job.done(data),\n    onError: OnError = (job, error) => job.error(error)\n  ): Promise<WorkerJob> {\n    // Promise resolves when thread starts working on this job\n    const startPromise = new Promise<WorkerJob>((onStart) => {\n      // Promise resolves when thread completes or fails working on this job\n      this.jobQueue.push({name, onMessage, onError, onStart});\n      return this;\n    });\n    this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    return await startPromise;\n  }\n\n  // PRIVATE\n\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  async _startQueuedJob(): Promise<void> {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      // Emit a debug event\n      // @ts-ignore\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      // Create a worker job to let the app access thread and manage job completion\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      // Set the worker thread's message handlers\n      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = (error) => queuedJob.onError(job, error);\n\n      // Resolve the start promise so that the app can start sending messages to worker\n      queuedJob.onStart(job);\n\n      // Wait for the app to signal that the job is complete, then return worker to queue\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   * @param worker\n   */\n  returnWorkerToQueue(worker: WorkerThread) {\n    const shouldDestroyWorker =\n      this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n  }\n\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  _getAvailableWorker(): WorkerThread | null {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({name, source: this.source, url: this.url});\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n"],"mappings":"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"}