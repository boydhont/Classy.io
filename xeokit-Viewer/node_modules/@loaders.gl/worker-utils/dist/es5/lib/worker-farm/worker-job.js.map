{"version":3,"file":"worker-job.js","names":["_assert","require","WorkerJob","jobName","workerThread","_this","_classCallCheck2","default","_defineProperty2","name","result","Promise","resolve","reject","_resolve","_reject","_createClass2","key","value","postMessage","type","payload","source","done","assert","isRunning","error","exports"],"sources":["../../../../src/lib/worker-farm/worker-job.ts"],"sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean = true;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void = () => {};\n  private _reject: (reason?: any) => void = () => {};\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value: any): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error: Error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"],"mappings":";;;;;;;;;;AAEA,IAAAA,OAAA,GAAAC,OAAA;AAA2C,IAKtBC,SAAS;EAU5B,SAAAA,UAAYC,OAAe,EAAEC,YAA0B,EAAE;IAAA,IAAAC,KAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAL,SAAA;IAAA,IAAAM,gBAAA,CAAAD,OAAA;IAAA,IAAAC,gBAAA,CAAAD,OAAA;IAAA,IAAAC,gBAAA,CAAAD,OAAA,qBAPpC,IAAI;IAAA,IAAAC,gBAAA,CAAAD,OAAA;IAAA,IAAAC,gBAAA,CAAAD,OAAA,oBAIgB,YAAM,CAAC,CAAC;IAAA,IAAAC,gBAAA,CAAAD,OAAA,mBACP,YAAM,CAAC,CAAC;IAGhD,IAAI,CAACE,IAAI,GAAGN,OAAO;IACnB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACM,MAAM,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MAC7CR,KAAI,CAACS,QAAQ,GAAGF,OAAO;MACvBP,KAAI,CAACU,OAAO,GAAGF,MAAM;IACvB,CAAC,CAAC;EACJ;EAAC,IAAAG,aAAA,CAAAT,OAAA,EAAAL,SAAA;IAAAe,GAAA;IAAAC,KAAA,EAMD,SAAAC,YAAYC,IAAuB,EAAEC,OAA6B,EAAQ;MACxE,IAAI,CAACjB,YAAY,CAACe,WAAW,CAAC;QAC5BG,MAAM,EAAE,YAAY;QACpBF,IAAI,EAAJA,IAAI;QACJC,OAAO,EAAPA;MACF,CAAC,CAAC;IACJ;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAKD,SAAAK,KAAKL,KAAU,EAAQ;MACrB,IAAAM,cAAM,EAAC,IAAI,CAACC,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACX,QAAQ,CAACI,KAAK,CAAC;IACtB;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAKD,SAAAQ,MAAMA,MAAY,EAAQ;MACxB,IAAAF,cAAM,EAAC,IAAI,CAACC,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACV,OAAO,CAACW,MAAK,CAAC;IACrB;EAAC;EAAA,OAAAxB,SAAA;AAAA;AAAAyB,OAAA,CAAApB,OAAA,GAAAL,SAAA"}