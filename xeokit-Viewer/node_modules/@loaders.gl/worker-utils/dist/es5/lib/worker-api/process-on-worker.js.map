{"version":3,"file":"process-on-worker.js","names":["_workerFarm","_interopRequireDefault","require","_getWorkerUrl","_getTransferList","canProcessOnWorker","worker","options","WorkerFarm","isSupported","processOnWorker","_x","_x2","_processOnWorker","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","data","context","name","workerFarm","source","workerPoolProps","workerPool","jobName","job","transferableOptions","result","_args","wrap","_callee$","_context","prev","next","length","undefined","getWorkerName","getWorkerFarm","url","getWorkerURL","getWorkerPool","startJob","onMessage","bind","sent","getTransferListForWriter","postMessage","input","abrupt","stop","_x3","_x4","_x5","_x6","_onMessage","_callee2","type","payload","id","message","_callee2$","_context2","t0","done","error","Error","process","t1","console","warn","concat"],"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\nimport {getTransferListForWriter} from '../worker-utils/get-transfer-list';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {source} = options;\n  const workerPoolProps: {name: string; source?: string; url?: string} = {name, source};\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"],"mappings":";;;;;;;;;;AAQA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,gBAAA,GAAAF,OAAA;AAaO,SAASG,kBAAkBA,CAACC,MAAoB,EAAEC,OAAuB,EAAE;EAChF,IAAI,CAACC,mBAAU,CAACC,WAAW,CAAC,CAAC,EAAE;IAC7B,OAAO,KAAK;EACd;EAEA,OAAOH,MAAM,CAACA,MAAM,KAAIC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAED,MAAM;AACzC;AAAC,SAOqBI,eAAeA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAA9B,SAAAC,QACLd,MAAoB,EACpBe,IAAS;IAAA,IAAAd,OAAA;MAAAe,OAAA;MAAAC,IAAA;MAAAC,UAAA;MAAAC,MAAA;MAAAC,eAAA;MAAAC,UAAA;MAAAC,OAAA;MAAAC,GAAA;MAAAC,mBAAA;MAAAC,MAAA;MAAAC,KAAA,GAAAjB,SAAA;IAAA,OAAAG,YAAA,CAAAD,OAAA,CAAAgB,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACT9B,OAA+B,GAAAyB,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UACpCV,OAAsB,GAAAU,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UAErBT,IAAI,GAAG,IAAAiB,2BAAa,EAAClC,MAAM,CAAC;UAE5BkB,UAAU,GAAGhB,mBAAU,CAACiC,aAAa,CAAClC,OAAO,CAAC;UAC7CkB,MAAM,GAAIlB,OAAO,CAAjBkB,MAAM;UACPC,eAA8D,GAAG;YAACH,IAAI,EAAJA,IAAI;YAAEE,MAAM,EAANA;UAAM,CAAC;UACrF,IAAI,CAACA,MAAM,EAAE;YACXC,eAAe,CAACgB,GAAG,GAAG,IAAAC,0BAAY,EAACrC,MAAM,EAAEC,OAAO,CAAC;UACrD;UACMoB,UAAU,GAAGH,UAAU,CAACoB,aAAa,CAAClB,eAAe,CAAC;UAEtDE,OAAO,GAAGrB,OAAO,CAACqB,OAAO,IAAItB,MAAM,CAACiB,IAAI;UAAAY,QAAA,CAAAE,IAAA;UAAA,OAC5BV,UAAU,CAACkB,QAAQ,CACnCjB,OAAO,EAEPkB,SAAS,CAACC,IAAI,CAAC,IAAI,EAAEzB,OAAO,CAC9B,CAAC;QAAA;UAJKO,GAAG,GAAAM,QAAA,CAAAa,IAAA;UAOHlB,mBAAmB,GAAG,IAAAmB,yCAAwB,EAAC1C,OAAO,CAAC;UAC7DsB,GAAG,CAACqB,WAAW,CAAC,SAAS,EAAE;YAACC,KAAK,EAAE9B,IAAI;YAAEd,OAAO,EAAEuB;UAAmB,CAAC,CAAC;UAACK,QAAA,CAAAE,IAAA;UAAA,OAEnDR,GAAG,CAACE,MAAM;QAAA;UAAzBA,MAAM,GAAAI,QAAA,CAAAa,IAAA;UAAA,OAAAb,QAAA,CAAAiB,MAAA,WACLrB,MAAM,CAACA,MAAM;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAAkB,IAAA;MAAA;IAAA,GAAAjC,OAAA;EAAA,CACrB;EAAA,OAAAP,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAOc+B,SAASA,CAAAQ,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,UAAA,CAAA5C,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA2C,WAAA;EAAAA,UAAA,OAAA1C,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAxB,SAAAwC,SACErC,OAAsB,EACtBO,GAAc,EACd+B,IAAuB,EACvBC,OAA6B;IAAA,IAAAC,EAAA,EAAAX,KAAA,EAAA5C,OAAA,EAAAwB,MAAA,EAAAgC,OAAA;IAAA,OAAA7C,YAAA,CAAAD,OAAA,CAAAgB,IAAA,UAAA+B,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;QAAA;UAAA4B,SAAA,CAAAC,EAAA,GAErBN,IAAI;UAAAK,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAAC,EAAA,KACL,MAAM,OAAAD,SAAA,CAAAC,EAAA,KAKN,OAAO,OAAAD,SAAA,CAAAC,EAAA,KAKP,SAAS;UAAA;QAAA;UARZrC,GAAG,CAACsC,IAAI,CAACN,OAAO,CAAC;UAAC,OAAAI,SAAA,CAAAb,MAAA;QAAA;UAKlBvB,GAAG,CAACuC,KAAK,CAAC,IAAIC,KAAK,CAACR,OAAO,CAACO,KAAK,CAAC,CAAC;UAAC,OAAAH,SAAA,CAAAb,MAAA;QAAA;UAK7BU,EAAE,GAAoBD,OAAO,CAA7BC,EAAE,EAAEX,KAAK,GAAaU,OAAO,CAAzBV,KAAK,EAAE5C,OAAO,GAAIsD,OAAO,CAAlBtD,OAAO;UAAA0D,SAAA,CAAA7B,IAAA;UAAA,IAElBd,OAAO,CAACgD,OAAO;YAAAL,SAAA,CAAA5B,IAAA;YAAA;UAAA;UAClBR,GAAG,CAACqB,WAAW,CAAC,OAAO,EAAE;YAACY,EAAE,EAAFA,EAAE;YAAEM,KAAK,EAAE;UAA6C,CAAC,CAAC;UAAC,OAAAH,SAAA,CAAAb,MAAA;QAAA;UAAAa,SAAA,CAAA5B,IAAA;UAAA,OAGlEf,OAAO,CAACgD,OAAO,CAACnB,KAAK,EAAE5C,OAAO,CAAC;QAAA;UAA9CwB,MAAM,GAAAkC,SAAA,CAAAjB,IAAA;UACZnB,GAAG,CAACqB,WAAW,CAAC,MAAM,EAAE;YAACY,EAAE,EAAFA,EAAE;YAAE/B,MAAM,EAANA;UAAM,CAAC,CAAC;UAACkC,SAAA,CAAA5B,IAAA;UAAA;QAAA;UAAA4B,SAAA,CAAA7B,IAAA;UAAA6B,SAAA,CAAAM,EAAA,GAAAN,SAAA;UAEhCF,OAAO,GAAGE,SAAA,CAAAM,EAAA,YAAiBF,KAAK,GAAGJ,SAAA,CAAAM,EAAA,CAAMR,OAAO,GAAG,eAAe;UACxElC,GAAG,CAACqB,WAAW,CAAC,OAAO,EAAE;YAACY,EAAE,EAAFA,EAAE;YAAEM,KAAK,EAAEL;UAAO,CAAC,CAAC;QAAC;UAAA,OAAAE,SAAA,CAAAb,MAAA;QAAA;UAMjDoB,OAAO,CAACC,IAAI,uCAAAC,MAAA,CAAuCd,IAAI,CAAE,CAAC;QAAC;QAAA;UAAA,OAAAK,SAAA,CAAAZ,IAAA;MAAA;IAAA,GAAAM,QAAA;EAAA,CAEhE;EAAA,OAAAD,UAAA,CAAA5C,KAAA,OAAAC,SAAA;AAAA"}