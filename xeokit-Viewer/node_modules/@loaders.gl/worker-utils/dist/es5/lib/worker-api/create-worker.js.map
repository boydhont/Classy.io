{"version":3,"file":"create-worker.js","names":["_asyncQueue","_interopRequireDefault","require","_workerBody","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","reject","done","resolve","value","then","n","next","prototype","apply","arguments","return","_return","ret","throw","_throw","thr","requestId","inputBatches","options","createWorker","process","processInBatches","WorkerBody","inWorkerThread","context","processOnMainThread","onmessage","_ref","_asyncToGenerator2","default","_regenerator","mark","_callee","type","payload","result","resultIterator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","message","wrap","_callee$","_context","prev","t0","Error","input","sent","postMessage","abrupt","AsyncQueue","t1","finish","push","close","t2","error","stop","_x","_x2","arrayBuffer","length","undefined","id","onMessage","removeEventListener","addEventListener"],"sources":["../../../../src/lib/worker-api/create-worker.ts"],"sourcesContent":["import type {\n  WorkerMessageType,\n  WorkerMessagePayload,\n  WorkerContext,\n  Process,\n  ProcessInBatches\n} from '../../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n// import {validateWorkerVersion} from './validate-worker-version';\n\n/** Counter for jobs */\nlet requestId = 0;\nlet inputBatches: AsyncQueue<any>;\nlet options: {[key: string]: any};\n\nexport type ProcessOnMainThread = (\n  data: any,\n  options?: {[key: string]: any},\n  context?: WorkerContext\n) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  if (!WorkerBody.inWorkerThread()) {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread\n  };\n\n  // eslint-disable-next-line complexity\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', {result});\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue<any>();\n          options = payload.options || {};\n          const resultIterator = processInBatches(inputBatches, options, context);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', {result: batch});\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', {error: message});\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer: ArrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type: string, payload: WorkerMessagePayload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = {id, input: arrayBuffer, options};\n    WorkerBody.postMessage('process', payload);\n  });\n}\n"],"mappings":"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"}