{"version":3,"file":"node-filesystem.js","names":["fs","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","NodeFileSystem","options","_classCallCheck2","fetch","_fetch","_createClass2","value","_readdir","_asyncToGenerator2","_regenerator","mark","_callee","dirname","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","readdir","abrupt","sent","stop","apply","_stat","_callee2","path","info","_callee2$","_context2","stat","size","Number","isDirectory","_x","_x2","_callee3","fallbackFetch","_callee3$","_context3","_x3","_x4","_open","_callee4","flags","mode","_callee4$","_context4","open","_x5","_x6","_x7","_close","_callee5","fd","_callee5$","_context5","close","_x8","_fstat","_callee6","_callee6$","_context6","fstat","_x9","_read","_callee7","_ref","_ref$buffer","buffer","_ref$offset","offset","_ref$length","_ref$position","position","totalBytesRead","_yield$fs$read","bytesRead","_callee7$","_context7","byteLength","read","_x10","_x11","exports"],"sources":["../../../../src/lib/filesystems/node-filesystem.ts"],"sourcesContent":["import * as fs from '../node/fs';\nimport {IFileSystem, IRandomAccessReadFileSystem} from '../../types';\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n\ntype Stat = {\n  size: number;\n  isDirectory: () => boolean;\n  info?: fs.Stats;\n};\n\ntype ReadOptions = {\n  buffer?: Buffer;\n  offset?: number;\n  length?: number;\n  position?: number;\n};\n\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @param options\n */\nexport default class NodeFileSystem implements IFileSystem, IRandomAccessReadFileSystem {\n  // implements IFileSystem\n  constructor(options: {[key: string]: any}) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir(dirname = '.', options?: {}): Promise<any[]> {\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path: string, options?: {}): Promise<Stat> {\n    const info = await fs.stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path: string, options: {[key: string]: any}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    // eslint-disable-next-line\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  // implements IRandomAccessFileSystem\n  async open(path: string, flags: string | number, mode?: any): Promise<number> {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd: number): Promise<void> {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd: number): Promise<Stat> {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(\n    fd: number,\n    // @ts-ignore Possibly null\n    {buffer = null, offset = 0, length = buffer.byteLength, position = null}: ReadOptions\n  ): Promise<{bytesRead: number; buffer: Buffer}> {\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fs.read(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"],"mappings":"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"}