{"version":3,"file":"text-iterators.js","names":["makeTextDecoderIterator","_x","_makeTextDecoderIterator","apply","arguments","_wrapAsyncGenerator2","default","arrayBufferIterator","options","length","undefined","_regenerator","mark","_callee","textDecoder","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","arrayBuffer","wrap","_callee$","_context","prev","next","TextDecoder","_asyncIterator","_awaitAsyncGenerator2","sent","done","value","decode","stream","t0","return","finish","stop","makeTextEncoderIterator","_x2","_makeTextEncoderIterator","_callee2","textIterator","textEncoder","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","text","_callee2$","_context2","TextEncoder","encode","makeLineIterator","_x3","_makeLineIterator","_callee3","previous","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","textChunk","eolIndex","line","_callee3$","_context3","indexOf","slice","makeNumberedLineIterator","_x4","_makeNumberedLineIterator","_callee4","lineIterator","counter","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_callee4$","_context4"],"sources":["../../../../src/lib/iterators/text-iterators.ts"],"sourcesContent":["// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\nexport async function* makeTextDecoderIterator(\n  arrayBufferIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: TextDecoderOptions = {}\n): AsyncIterable<string> {\n  const textDecoder = new TextDecoder(undefined, options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string'\n      ? arrayBuffer\n      : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* makeTextEncoderIterator(\n  textIterator: AsyncIterable<string> | Iterable<ArrayBuffer>\n): AsyncIterable<ArrayBuffer> {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\n\nexport async function* makeLineIterator(\n  textIterator: AsyncIterable<string>\n): AsyncIterable<string> {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(\n  lineIterator: AsyncIterable<string>\n): AsyncIterable<{counter: number; line: string}> {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"],"mappings":"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"}