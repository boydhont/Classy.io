{"version":3,"file":"async-iteration.js","names":["_arrayBufferUtils","require","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","reject","done","resolve","value","then","n","next","prototype","apply","arguments","return","_return","ret","throw","_throw","thr","forEach","_x","_x2","_forEach","_asyncToGenerator2","default","_regenerator","mark","_callee","visitor","_yield$iterator$next","cancel","wrap","_callee$","_context","prev","sent","abrupt","stop","concatenateArrayBuffersAsync","_x3","_concatenateArrayBuffersAsync","_callee2","arrayBuffers","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_callee2$","_context2","push","t0","finish","concatenateArrayBuffers","concatenateStringsAsync","_x4","_concatenateStringsAsync","_callee3","strings","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee3$","_context3","join"],"sources":["../../../../src/lib/iterators/async-iteration.ts"],"sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\n\nexport async function concatenateArrayBuffersAsync(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n): Promise<ArrayBuffer> {\n  const arrayBuffers: ArrayBuffer[] = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n\nexport async function concatenateStringsAsync(\n  asyncIterator: AsyncIterable<string> | Iterable<string>\n): Promise<string> {\n  const strings: string[] = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n"],"mappings":"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"}