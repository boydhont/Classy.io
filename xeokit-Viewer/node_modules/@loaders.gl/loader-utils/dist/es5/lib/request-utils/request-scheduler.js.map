{"version":3,"file":"request-scheduler.js","names":["_stats","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","props","undefined","_classCallCheck2","Map","stats","Stats","get","_createClass2","value","scheduleRequest","handle","getPriority","Promise","resolve","done","requestMap","has","request","priority","promise","requestQueue","set","_issueNewRequests","_issueRequest","_this","isDone","delete","activeRequestCount","_this2","deferredUpdate","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","shift","_updateRequest","splice","sort","a","b","exports"],"sources":["../../../../src/lib/request-utils/request-scheduler.ts"],"sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAAsC,SAAAC,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,QAAAC,gBAAA,CAAAC,OAAA,EAAAR,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAmB,yBAAA,GAAAnB,MAAA,CAAAoB,gBAAA,CAAAV,MAAA,EAAAV,MAAA,CAAAmB,yBAAA,CAAAL,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAqB,cAAA,CAAAX,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAgBtC,IAAMY,oBAAoB,GAAG,iBAAiB;AAC9C,IAAMC,oBAAoB,GAAG,iBAAiB;AAC9C,IAAMC,uBAAuB,GAAG,oBAAoB;AACpD,IAAMC,yBAAyB,GAAG,sBAAsB;AACxD,IAAMC,yBAAyB,GAAG,sBAAsB;AAExD,IAAMC,aAA8C,GAAG;EACrDC,EAAE,EAAE,mBAAmB;EAEvBC,gBAAgB,EAAE,IAAI;EAEtBC,WAAW,EAAE;AACf,CAAC;AAAC,IAcmBC,gBAAgB;EAUnC,SAAAA,iBAAA,EAA+C;IAAA,IAAnCC,KAA4B,GAAApB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAqB,SAAA,GAAArB,SAAA,MAAG,CAAC,CAAC;IAAA,IAAAsB,gBAAA,CAAAhB,OAAA,QAAAa,gBAAA;IAAA,IAAAd,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,8BAPhB,CAAC;IAAA,IAAAD,gBAAA,CAAAC,OAAA,wBAGI,EAAE;IAAA,IAAAD,gBAAA,CAAAC,OAAA,sBACsB,IAAIiB,GAAG,CAAC,CAAC;IAAA,IAAAlB,gBAAA,CAAAC,OAAA,0BACrC,IAAI;IAGhC,IAAI,CAACc,KAAK,GAAAvB,aAAA,CAAAA,aAAA,KAAOkB,aAAa,GAAKK,KAAK,CAAC;IAGzC,IAAI,CAACI,KAAK,GAAG,IAAIC,YAAK,CAAC;MAACT,EAAE,EAAE,IAAI,CAACI,KAAK,CAACJ;IAAE,CAAC,CAAC;IAC3C,IAAI,CAACQ,KAAK,CAACE,GAAG,CAAChB,oBAAoB,CAAC;IACpC,IAAI,CAACc,KAAK,CAACE,GAAG,CAACf,oBAAoB,CAAC;IACpC,IAAI,CAACa,KAAK,CAACE,GAAG,CAACd,uBAAuB,CAAC;IACvC,IAAI,CAACY,KAAK,CAACE,GAAG,CAACb,yBAAyB,CAAC;IACzC,IAAI,CAACW,KAAK,CAACE,GAAG,CAACZ,yBAAyB,CAAC;EAC3C;EAAC,IAAAa,aAAA,CAAArB,OAAA,EAAAa,gBAAA;IAAAf,GAAA;IAAAwB,KAAA,EAkBD,SAAAC,gBACEC,MAAc,EAEU;MAAA,IADxBC,WAAgC,GAAA/B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAqB,SAAA,GAAArB,SAAA,MAAG;QAAA,OAAM,CAAC;MAAA;MAG1C,IAAI,CAAC,IAAI,CAACoB,KAAK,CAACH,gBAAgB,EAAE;QAChC,OAAOe,OAAO,CAACC,OAAO,CAAC;UAACC,IAAI,EAAE,SAAAA,KAAA,EAAM,CAAC;QAAC,CAAC,CAAC;MAC1C;MAGA,IAAI,IAAI,CAACC,UAAU,CAACC,GAAG,CAACN,MAAM,CAAC,EAAE;QAC/B,OAAO,IAAI,CAACK,UAAU,CAACT,GAAG,CAACI,MAAM,CAAC;MACpC;MAEA,IAAMO,OAAgB,GAAG;QAACP,MAAM,EAANA,MAAM;QAAEQ,QAAQ,EAAE,CAAC;QAAEP,WAAW,EAAXA;MAAW,CAAC;MAC3D,IAAMQ,OAAO,GAAG,IAAIP,OAAO,CAAgB,UAACC,OAAO,EAAK;QAEtDI,OAAO,CAACJ,OAAO,GAAGA,OAAO;QACzB,OAAOI,OAAO;MAChB,CAAC,CAAC;MAEF,IAAI,CAACG,YAAY,CAAC7C,IAAI,CAAC0C,OAAO,CAAC;MAC/B,IAAI,CAACF,UAAU,CAACM,GAAG,CAACX,MAAM,EAAES,OAAO,CAAC;MACpC,IAAI,CAACG,iBAAiB,CAAC,CAAC;MACxB,OAAOH,OAAO;IAChB;EAAC;IAAAnC,GAAA;IAAAwB,KAAA,EAID,SAAAe,cAAcN,OAAgB,EAAgB;MAAA,IAAAO,KAAA;MAC5C,IAAOd,MAAM,GAAaO,OAAO,CAA1BP,MAAM;QAAEG,OAAO,GAAII,OAAO,CAAlBJ,OAAO;MACtB,IAAIY,MAAM,GAAG,KAAK;MAElB,IAAMX,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;QAEjB,IAAI,CAACW,MAAM,EAAE;UACXA,MAAM,GAAG,IAAI;UAGbD,KAAI,CAACT,UAAU,CAACW,MAAM,CAAChB,MAAM,CAAC;UAC9Bc,KAAI,CAACG,kBAAkB,EAAE;UAEzBH,KAAI,CAACF,iBAAiB,CAAC,CAAC;QAC1B;MACF,CAAC;MAGD,IAAI,CAACK,kBAAkB,EAAE;MAEzB,OAAOd,OAAO,GAAGA,OAAO,CAAC;QAACC,IAAI,EAAJA;MAAI,CAAC,CAAC,GAAGF,OAAO,CAACC,OAAO,CAAC;QAACC,IAAI,EAAJA;MAAI,CAAC,CAAC;IAC5D;EAAC;IAAA9B,GAAA;IAAAwB,KAAA,EAGD,SAAAc,kBAAA,EAA0B;MAAA,IAAAM,MAAA;MACxB,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;QACxB,IAAI,CAACA,cAAc,GAAGC,UAAU,CAAC;UAAA,OAAMF,MAAI,CAACG,sBAAsB,CAAC,CAAC;QAAA,GAAE,CAAC,CAAC;MAC1E;IACF;EAAC;IAAA/C,GAAA;IAAAwB,KAAA,EAGD,SAAAuB,uBAAA,EAAyB;MAEvB,IAAI,CAACF,cAAc,GAAG,IAAI;MAE1B,IAAMG,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAClC,KAAK,CAACF,WAAW,GAAG,IAAI,CAAC6B,kBAAkB,EAAE,CAAC,CAAC;MAE/E,IAAIK,SAAS,KAAK,CAAC,EAAE;QACnB;MACF;MAEA,IAAI,CAACG,kBAAkB,CAAC,CAAC;MAGzB,KAAK,IAAIxD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqD,SAAS,EAAE,EAAErD,CAAC,EAAE;QAClC,IAAMsC,OAAO,GAAG,IAAI,CAACG,YAAY,CAACgB,KAAK,CAAC,CAAC;QACzC,IAAInB,OAAO,EAAE;UACX,IAAI,CAACM,aAAa,CAACN,OAAO,CAAC;QAC7B;MACF;IAIF;EAAC;IAAAjC,GAAA;IAAAwB,KAAA,EAGD,SAAA2B,mBAAA,EAAqB;MACnB,IAAMf,YAAY,GAAG,IAAI,CAACA,YAAY;MACtC,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,YAAY,CAACvC,MAAM,EAAE,EAAEF,CAAC,EAAE;QAC5C,IAAMsC,OAAO,GAAGG,YAAY,CAACzC,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC0D,cAAc,CAACpB,OAAO,CAAC,EAAE;UAEjCG,YAAY,CAACkB,MAAM,CAAC3D,CAAC,EAAE,CAAC,CAAC;UACzB,IAAI,CAACoC,UAAU,CAACW,MAAM,CAACT,OAAO,CAACP,MAAM,CAAC;UACtC/B,CAAC,EAAE;QACL;MACF;MAGAyC,YAAY,CAACmB,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,CAACtB,QAAQ,GAAGuB,CAAC,CAACvB,QAAQ;MAAA,EAAC;IACtD;EAAC;IAAAlC,GAAA;IAAAwB,KAAA,EAGD,SAAA6B,eAAepB,OAAO,EAAE;MACtBA,OAAO,CAACC,QAAQ,GAAGD,OAAO,CAACN,WAAW,CAACM,OAAO,CAACP,MAAM,CAAC;MAGtD,IAAIO,OAAO,CAACC,QAAQ,GAAG,CAAC,EAAE;QACxBD,OAAO,CAACJ,OAAO,CAAC,IAAI,CAAC;QACrB,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb;EAAC;EAAA,OAAAd,gBAAA;AAAA;AAAA2C,OAAA,CAAAxD,OAAA,GAAAa,gBAAA"}