{"version":3,"file":"parse-with-worker.js","names":["_workerUtils","require","canParseWithWorker","loader","options","WorkerFarm","isSupported","isBrowser","_nodeWorkers","worker","parseWithWorker","_x","_x2","_x3","_x4","_x5","_parseWithWorker","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","data","context","parseOnMainThread","name","url","workerFarm","workerPool","job","result","wrap","_callee$","_context","prev","next","id","getWorkerURL","getWorkerFarm","getWorkerPool","JSON","parse","stringify","startJob","onMessage","bind","sent","postMessage","input","abrupt","stop","_x6","_x7","_x8","_x9","_onMessage","_callee2","type","payload","_options","message","_callee2$","_context2","t0","done","error","Error","t1","console","warn","concat"],"sources":["../../../../src/lib/worker-loader-utils/parse-with-worker.ts"],"sourcesContent":["import {\n  WorkerJob,\n  WorkerMessageType,\n  WorkerMessagePayload,\n  isBrowser\n} from '@loaders.gl/worker-utils';\nimport type {Loader, LoaderOptions, LoaderContext} from '../../types';\nimport {WorkerFarm, getWorkerURL} from '@loaders.gl/worker-utils';\n\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canParseWithWorker(loader: Loader, options?: LoaderOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  // Node workers are still experimental\n  if (!isBrowser && !options?._nodeWorkers) {\n    return false;\n  }\n\n  return loader.worker && options?.worker;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.\n */\nexport async function parseWithWorker(\n  loader: Loader,\n  data: any,\n  options?: LoaderOptions,\n  context?: LoaderContext,\n  parseOnMainThread?: (arrayBuffer: ArrayBuffer, options: {[key: string]: any}) => Promise<void>\n) {\n  const name = loader.id; // TODO\n  const url = getWorkerURL(loader, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  // options.log object contains functions which cannot be transferred\n  // context.fetch & context.parse functions cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n\n  const job = await workerPool.startJob(\n    'process-on-worker',\n    // @ts-expect-error\n    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises\n  );\n\n  job.postMessage('process', {\n    // @ts-ignore\n    input: data,\n    options,\n    context\n  });\n\n  const result = await job.result;\n  // TODO - what is going on here?\n  return await result.result;\n}\n\n/**\n * Handle worker's responses to the main thread\n * @param job\n * @param type\n * @param payload\n */\nasync function onMessage(\n  parseOnMainThread: (arrayBuffer: ArrayBuffer, options?: {[key: string]: any}) => Promise<void>,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for main thread to parseO\n      const {id, input, options} = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`parse-with-worker unknown message ${type}`);\n  }\n}\n"],"mappings":"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"}